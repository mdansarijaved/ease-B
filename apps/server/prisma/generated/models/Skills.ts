
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Skills` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Skills
 * 
 */
export type SkillsModel = runtime.Types.Result.DefaultSelection<Prisma.$SkillsPayload>

export type AggregateSkills = {
  _count: SkillsCountAggregateOutputType | null
  _min: SkillsMinAggregateOutputType | null
  _max: SkillsMaxAggregateOutputType | null
}

export type SkillsMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkillsMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type SkillsCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type SkillsMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SkillsMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type SkillsCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type SkillsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Skills to aggregate.
   */
  where?: Prisma.SkillsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillsOrderByWithRelationInput | Prisma.SkillsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SkillsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Skills
  **/
  _count?: true | SkillsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SkillsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SkillsMaxAggregateInputType
}

export type GetSkillsAggregateType<T extends SkillsAggregateArgs> = {
      [P in keyof T & keyof AggregateSkills]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSkills[P]>
    : Prisma.GetScalarType<T[P], AggregateSkills[P]>
}




export type SkillsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SkillsWhereInput
  orderBy?: Prisma.SkillsOrderByWithAggregationInput | Prisma.SkillsOrderByWithAggregationInput[]
  by: Prisma.SkillsScalarFieldEnum[] | Prisma.SkillsScalarFieldEnum
  having?: Prisma.SkillsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SkillsCountAggregateInputType | true
  _min?: SkillsMinAggregateInputType
  _max?: SkillsMaxAggregateInputType
}

export type SkillsGroupByOutputType = {
  id: string
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
  _count: SkillsCountAggregateOutputType | null
  _min: SkillsMinAggregateOutputType | null
  _max: SkillsMaxAggregateOutputType | null
}

type GetSkillsGroupByPayload<T extends SkillsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SkillsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SkillsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SkillsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SkillsGroupByOutputType[P]>
      }
    >
  > 



export type SkillsWhereInput = {
  AND?: Prisma.SkillsWhereInput | Prisma.SkillsWhereInput[]
  OR?: Prisma.SkillsWhereInput[]
  NOT?: Prisma.SkillsWhereInput | Prisma.SkillsWhereInput[]
  id?: Prisma.StringFilter<"Skills"> | string
  name?: Prisma.StringFilter<"Skills"> | string
  description?: Prisma.StringFilter<"Skills"> | string
  createdAt?: Prisma.DateTimeFilter<"Skills"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Skills"> | Date | string
  mentorSkills?: Prisma.MentorSkillsListRelationFilter
}

export type SkillsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mentorSkills?: Prisma.MentorSkillsOrderByRelationAggregateInput
}

export type SkillsWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.SkillsWhereInput | Prisma.SkillsWhereInput[]
  OR?: Prisma.SkillsWhereInput[]
  NOT?: Prisma.SkillsWhereInput | Prisma.SkillsWhereInput[]
  description?: Prisma.StringFilter<"Skills"> | string
  createdAt?: Prisma.DateTimeFilter<"Skills"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Skills"> | Date | string
  mentorSkills?: Prisma.MentorSkillsListRelationFilter
}, "id" | "name">

export type SkillsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.SkillsCountOrderByAggregateInput
  _max?: Prisma.SkillsMaxOrderByAggregateInput
  _min?: Prisma.SkillsMinOrderByAggregateInput
}

export type SkillsScalarWhereWithAggregatesInput = {
  AND?: Prisma.SkillsScalarWhereWithAggregatesInput | Prisma.SkillsScalarWhereWithAggregatesInput[]
  OR?: Prisma.SkillsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SkillsScalarWhereWithAggregatesInput | Prisma.SkillsScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Skills"> | string
  name?: Prisma.StringWithAggregatesFilter<"Skills"> | string
  description?: Prisma.StringWithAggregatesFilter<"Skills"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Skills"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Skills"> | Date | string
}

export type SkillsCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mentorSkills?: Prisma.MentorSkillsCreateNestedManyWithoutSkillInput
}

export type SkillsUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mentorSkills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutSkillInput
}

export type SkillsUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentorSkills?: Prisma.MentorSkillsUpdateManyWithoutSkillNestedInput
}

export type SkillsUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentorSkills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutSkillNestedInput
}

export type SkillsCreateManyInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillsUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillsUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type SkillsScalarRelationFilter = {
  is?: Prisma.SkillsWhereInput
  isNot?: Prisma.SkillsWhereInput
}

export type SkillsCreateNestedOneWithoutMentorSkillsInput = {
  create?: Prisma.XOR<Prisma.SkillsCreateWithoutMentorSkillsInput, Prisma.SkillsUncheckedCreateWithoutMentorSkillsInput>
  connectOrCreate?: Prisma.SkillsCreateOrConnectWithoutMentorSkillsInput
  connect?: Prisma.SkillsWhereUniqueInput
}

export type SkillsUpdateOneRequiredWithoutMentorSkillsNestedInput = {
  create?: Prisma.XOR<Prisma.SkillsCreateWithoutMentorSkillsInput, Prisma.SkillsUncheckedCreateWithoutMentorSkillsInput>
  connectOrCreate?: Prisma.SkillsCreateOrConnectWithoutMentorSkillsInput
  upsert?: Prisma.SkillsUpsertWithoutMentorSkillsInput
  connect?: Prisma.SkillsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SkillsUpdateToOneWithWhereWithoutMentorSkillsInput, Prisma.SkillsUpdateWithoutMentorSkillsInput>, Prisma.SkillsUncheckedUpdateWithoutMentorSkillsInput>
}

export type SkillsCreateWithoutMentorSkillsInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillsUncheckedCreateWithoutMentorSkillsInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type SkillsCreateOrConnectWithoutMentorSkillsInput = {
  where: Prisma.SkillsWhereUniqueInput
  create: Prisma.XOR<Prisma.SkillsCreateWithoutMentorSkillsInput, Prisma.SkillsUncheckedCreateWithoutMentorSkillsInput>
}

export type SkillsUpsertWithoutMentorSkillsInput = {
  update: Prisma.XOR<Prisma.SkillsUpdateWithoutMentorSkillsInput, Prisma.SkillsUncheckedUpdateWithoutMentorSkillsInput>
  create: Prisma.XOR<Prisma.SkillsCreateWithoutMentorSkillsInput, Prisma.SkillsUncheckedCreateWithoutMentorSkillsInput>
  where?: Prisma.SkillsWhereInput
}

export type SkillsUpdateToOneWithWhereWithoutMentorSkillsInput = {
  where?: Prisma.SkillsWhereInput
  data: Prisma.XOR<Prisma.SkillsUpdateWithoutMentorSkillsInput, Prisma.SkillsUncheckedUpdateWithoutMentorSkillsInput>
}

export type SkillsUpdateWithoutMentorSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkillsUncheckedUpdateWithoutMentorSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SkillsCountOutputType
 */

export type SkillsCountOutputType = {
  mentorSkills: number
}

export type SkillsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentorSkills?: boolean | SkillsCountOutputTypeCountMentorSkillsArgs
}

/**
 * SkillsCountOutputType without action
 */
export type SkillsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SkillsCountOutputType
   */
  select?: Prisma.SkillsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SkillsCountOutputType without action
 */
export type SkillsCountOutputTypeCountMentorSkillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorSkillsWhereInput
}


export type SkillsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentorSkills?: boolean | Prisma.Skills$mentorSkillsArgs<ExtArgs>
  _count?: boolean | Prisma.SkillsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["skills"]>

export type SkillsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["skills"]>

export type SkillsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["skills"]>

export type SkillsSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type SkillsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["skills"]>
export type SkillsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentorSkills?: boolean | Prisma.Skills$mentorSkillsArgs<ExtArgs>
  _count?: boolean | Prisma.SkillsCountOutputTypeDefaultArgs<ExtArgs>
}
export type SkillsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type SkillsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $SkillsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Skills"
  objects: {
    mentorSkills: Prisma.$MentorSkillsPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["skills"]>
  composites: {}
}

export type SkillsGetPayload<S extends boolean | null | undefined | SkillsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SkillsPayload, S>

export type SkillsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SkillsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SkillsCountAggregateInputType | true
  }

export interface SkillsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Skills'], meta: { name: 'Skills' } }
  /**
   * Find zero or one Skills that matches the filter.
   * @param {SkillsFindUniqueArgs} args - Arguments to find a Skills
   * @example
   * // Get one Skills
   * const skills = await prisma.skills.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SkillsFindUniqueArgs>(args: Prisma.SelectSubset<T, SkillsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Skills that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SkillsFindUniqueOrThrowArgs} args - Arguments to find a Skills
   * @example
   * // Get one Skills
   * const skills = await prisma.skills.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SkillsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SkillsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsFindFirstArgs} args - Arguments to find a Skills
   * @example
   * // Get one Skills
   * const skills = await prisma.skills.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SkillsFindFirstArgs>(args?: Prisma.SelectSubset<T, SkillsFindFirstArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skills that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsFindFirstOrThrowArgs} args - Arguments to find a Skills
   * @example
   * // Get one Skills
   * const skills = await prisma.skills.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SkillsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SkillsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Skills that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Skills
   * const skills = await prisma.skills.findMany()
   * 
   * // Get first 10 Skills
   * const skills = await prisma.skills.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const skillsWithIdOnly = await prisma.skills.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SkillsFindManyArgs>(args?: Prisma.SelectSubset<T, SkillsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Skills.
   * @param {SkillsCreateArgs} args - Arguments to create a Skills.
   * @example
   * // Create one Skills
   * const Skills = await prisma.skills.create({
   *   data: {
   *     // ... data to create a Skills
   *   }
   * })
   * 
   */
  create<T extends SkillsCreateArgs>(args: Prisma.SelectSubset<T, SkillsCreateArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Skills.
   * @param {SkillsCreateManyArgs} args - Arguments to create many Skills.
   * @example
   * // Create many Skills
   * const skills = await prisma.skills.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SkillsCreateManyArgs>(args?: Prisma.SelectSubset<T, SkillsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Skills and returns the data saved in the database.
   * @param {SkillsCreateManyAndReturnArgs} args - Arguments to create many Skills.
   * @example
   * // Create many Skills
   * const skills = await prisma.skills.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Skills and only return the `id`
   * const skillsWithIdOnly = await prisma.skills.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SkillsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SkillsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Skills.
   * @param {SkillsDeleteArgs} args - Arguments to delete one Skills.
   * @example
   * // Delete one Skills
   * const Skills = await prisma.skills.delete({
   *   where: {
   *     // ... filter to delete one Skills
   *   }
   * })
   * 
   */
  delete<T extends SkillsDeleteArgs>(args: Prisma.SelectSubset<T, SkillsDeleteArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Skills.
   * @param {SkillsUpdateArgs} args - Arguments to update one Skills.
   * @example
   * // Update one Skills
   * const skills = await prisma.skills.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SkillsUpdateArgs>(args: Prisma.SelectSubset<T, SkillsUpdateArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Skills.
   * @param {SkillsDeleteManyArgs} args - Arguments to filter Skills to delete.
   * @example
   * // Delete a few Skills
   * const { count } = await prisma.skills.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SkillsDeleteManyArgs>(args?: Prisma.SelectSubset<T, SkillsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Skills
   * const skills = await prisma.skills.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SkillsUpdateManyArgs>(args: Prisma.SelectSubset<T, SkillsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Skills and returns the data updated in the database.
   * @param {SkillsUpdateManyAndReturnArgs} args - Arguments to update many Skills.
   * @example
   * // Update many Skills
   * const skills = await prisma.skills.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Skills and only return the `id`
   * const skillsWithIdOnly = await prisma.skills.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SkillsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SkillsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Skills.
   * @param {SkillsUpsertArgs} args - Arguments to update or create a Skills.
   * @example
   * // Update or create a Skills
   * const skills = await prisma.skills.upsert({
   *   create: {
   *     // ... data to create a Skills
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Skills we want to update
   *   }
   * })
   */
  upsert<T extends SkillsUpsertArgs>(args: Prisma.SelectSubset<T, SkillsUpsertArgs<ExtArgs>>): Prisma.Prisma__SkillsClient<runtime.Types.Result.GetResult<Prisma.$SkillsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsCountArgs} args - Arguments to filter Skills to count.
   * @example
   * // Count the number of Skills
   * const count = await prisma.skills.count({
   *   where: {
   *     // ... the filter for the Skills we want to count
   *   }
   * })
  **/
  count<T extends SkillsCountArgs>(
    args?: Prisma.Subset<T, SkillsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SkillsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SkillsAggregateArgs>(args: Prisma.Subset<T, SkillsAggregateArgs>): Prisma.PrismaPromise<GetSkillsAggregateType<T>>

  /**
   * Group by Skills.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkillsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SkillsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SkillsGroupByArgs['orderBy'] }
      : { orderBy?: SkillsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Skills model
 */
readonly fields: SkillsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Skills.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SkillsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mentorSkills<T extends Prisma.Skills$mentorSkillsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Skills$mentorSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Skills model
 */
export interface SkillsFieldRefs {
  readonly id: Prisma.FieldRef<"Skills", 'String'>
  readonly name: Prisma.FieldRef<"Skills", 'String'>
  readonly description: Prisma.FieldRef<"Skills", 'String'>
  readonly createdAt: Prisma.FieldRef<"Skills", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Skills", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Skills findUnique
 */
export type SkillsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where: Prisma.SkillsWhereUniqueInput
}

/**
 * Skills findUniqueOrThrow
 */
export type SkillsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where: Prisma.SkillsWhereUniqueInput
}

/**
 * Skills findFirst
 */
export type SkillsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where?: Prisma.SkillsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillsOrderByWithRelationInput | Prisma.SkillsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Skills.
   */
  cursor?: Prisma.SkillsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Skills.
   */
  distinct?: Prisma.SkillsScalarFieldEnum | Prisma.SkillsScalarFieldEnum[]
}

/**
 * Skills findFirstOrThrow
 */
export type SkillsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where?: Prisma.SkillsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillsOrderByWithRelationInput | Prisma.SkillsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Skills.
   */
  cursor?: Prisma.SkillsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Skills.
   */
  distinct?: Prisma.SkillsScalarFieldEnum | Prisma.SkillsScalarFieldEnum[]
}

/**
 * Skills findMany
 */
export type SkillsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter, which Skills to fetch.
   */
  where?: Prisma.SkillsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Skills to fetch.
   */
  orderBy?: Prisma.SkillsOrderByWithRelationInput | Prisma.SkillsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Skills.
   */
  cursor?: Prisma.SkillsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Skills from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Skills.
   */
  skip?: number
  distinct?: Prisma.SkillsScalarFieldEnum | Prisma.SkillsScalarFieldEnum[]
}

/**
 * Skills create
 */
export type SkillsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * The data needed to create a Skills.
   */
  data: Prisma.XOR<Prisma.SkillsCreateInput, Prisma.SkillsUncheckedCreateInput>
}

/**
 * Skills createMany
 */
export type SkillsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Skills.
   */
  data: Prisma.SkillsCreateManyInput | Prisma.SkillsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Skills createManyAndReturn
 */
export type SkillsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * The data used to create many Skills.
   */
  data: Prisma.SkillsCreateManyInput | Prisma.SkillsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Skills update
 */
export type SkillsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * The data needed to update a Skills.
   */
  data: Prisma.XOR<Prisma.SkillsUpdateInput, Prisma.SkillsUncheckedUpdateInput>
  /**
   * Choose, which Skills to update.
   */
  where: Prisma.SkillsWhereUniqueInput
}

/**
 * Skills updateMany
 */
export type SkillsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Skills.
   */
  data: Prisma.XOR<Prisma.SkillsUpdateManyMutationInput, Prisma.SkillsUncheckedUpdateManyInput>
  /**
   * Filter which Skills to update
   */
  where?: Prisma.SkillsWhereInput
  /**
   * Limit how many Skills to update.
   */
  limit?: number
}

/**
 * Skills updateManyAndReturn
 */
export type SkillsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * The data used to update Skills.
   */
  data: Prisma.XOR<Prisma.SkillsUpdateManyMutationInput, Prisma.SkillsUncheckedUpdateManyInput>
  /**
   * Filter which Skills to update
   */
  where?: Prisma.SkillsWhereInput
  /**
   * Limit how many Skills to update.
   */
  limit?: number
}

/**
 * Skills upsert
 */
export type SkillsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * The filter to search for the Skills to update in case it exists.
   */
  where: Prisma.SkillsWhereUniqueInput
  /**
   * In case the Skills found by the `where` argument doesn't exist, create a new Skills with this data.
   */
  create: Prisma.XOR<Prisma.SkillsCreateInput, Prisma.SkillsUncheckedCreateInput>
  /**
   * In case the Skills was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SkillsUpdateInput, Prisma.SkillsUncheckedUpdateInput>
}

/**
 * Skills delete
 */
export type SkillsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
  /**
   * Filter which Skills to delete.
   */
  where: Prisma.SkillsWhereUniqueInput
}

/**
 * Skills deleteMany
 */
export type SkillsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Skills to delete
   */
  where?: Prisma.SkillsWhereInput
  /**
   * Limit how many Skills to delete.
   */
  limit?: number
}

/**
 * Skills.mentorSkills
 */
export type Skills$mentorSkillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorSkills
   */
  select?: Prisma.MentorSkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorSkills
   */
  omit?: Prisma.MentorSkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorSkillsInclude<ExtArgs> | null
  where?: Prisma.MentorSkillsWhereInput
  orderBy?: Prisma.MentorSkillsOrderByWithRelationInput | Prisma.MentorSkillsOrderByWithRelationInput[]
  cursor?: Prisma.MentorSkillsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MentorSkillsScalarFieldEnum | Prisma.MentorSkillsScalarFieldEnum[]
}

/**
 * Skills without action
 */
export type SkillsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Skills
   */
  select?: Prisma.SkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Skills
   */
  omit?: Prisma.SkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SkillsInclude<ExtArgs> | null
}
