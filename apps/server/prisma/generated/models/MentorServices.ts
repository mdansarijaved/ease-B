
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MentorServices` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MentorServices
 * 
 */
export type MentorServicesModel = runtime.Types.Result.DefaultSelection<Prisma.$MentorServicesPayload>

export type AggregateMentorServices = {
  _count: MentorServicesCountAggregateOutputType | null
  _avg: MentorServicesAvgAggregateOutputType | null
  _sum: MentorServicesSumAggregateOutputType | null
  _min: MentorServicesMinAggregateOutputType | null
  _max: MentorServicesMaxAggregateOutputType | null
}

export type MentorServicesAvgAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type MentorServicesSumAggregateOutputType = {
  price: number | null
  duration: number | null
}

export type MentorServicesMinAggregateOutputType = {
  id: string | null
  mentorId: string | null
  serviceId: string | null
  price: number | null
  currency: string | null
  duration: number | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorServicesMaxAggregateOutputType = {
  id: string | null
  mentorId: string | null
  serviceId: string | null
  price: number | null
  currency: string | null
  duration: number | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorServicesCountAggregateOutputType = {
  id: number
  mentorId: number
  serviceId: number
  price: number
  currency: number
  duration: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MentorServicesAvgAggregateInputType = {
  price?: true
  duration?: true
}

export type MentorServicesSumAggregateInputType = {
  price?: true
  duration?: true
}

export type MentorServicesMinAggregateInputType = {
  id?: true
  mentorId?: true
  serviceId?: true
  price?: true
  currency?: true
  duration?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorServicesMaxAggregateInputType = {
  id?: true
  mentorId?: true
  serviceId?: true
  price?: true
  currency?: true
  duration?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorServicesCountAggregateInputType = {
  id?: true
  mentorId?: true
  serviceId?: true
  price?: true
  currency?: true
  duration?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MentorServicesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MentorServices to aggregate.
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorServices to fetch.
   */
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MentorServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MentorServices
  **/
  _count?: true | MentorServicesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: MentorServicesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: MentorServicesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MentorServicesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MentorServicesMaxAggregateInputType
}

export type GetMentorServicesAggregateType<T extends MentorServicesAggregateArgs> = {
      [P in keyof T & keyof AggregateMentorServices]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMentorServices[P]>
    : Prisma.GetScalarType<T[P], AggregateMentorServices[P]>
}




export type MentorServicesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorServicesWhereInput
  orderBy?: Prisma.MentorServicesOrderByWithAggregationInput | Prisma.MentorServicesOrderByWithAggregationInput[]
  by: Prisma.MentorServicesScalarFieldEnum[] | Prisma.MentorServicesScalarFieldEnum
  having?: Prisma.MentorServicesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MentorServicesCountAggregateInputType | true
  _avg?: MentorServicesAvgAggregateInputType
  _sum?: MentorServicesSumAggregateInputType
  _min?: MentorServicesMinAggregateInputType
  _max?: MentorServicesMaxAggregateInputType
}

export type MentorServicesGroupByOutputType = {
  id: string
  mentorId: string
  serviceId: string
  price: number
  currency: string
  duration: number
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: MentorServicesCountAggregateOutputType | null
  _avg: MentorServicesAvgAggregateOutputType | null
  _sum: MentorServicesSumAggregateOutputType | null
  _min: MentorServicesMinAggregateOutputType | null
  _max: MentorServicesMaxAggregateOutputType | null
}

type GetMentorServicesGroupByPayload<T extends MentorServicesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MentorServicesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MentorServicesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MentorServicesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MentorServicesGroupByOutputType[P]>
      }
    >
  > 



export type MentorServicesWhereInput = {
  AND?: Prisma.MentorServicesWhereInput | Prisma.MentorServicesWhereInput[]
  OR?: Prisma.MentorServicesWhereInput[]
  NOT?: Prisma.MentorServicesWhereInput | Prisma.MentorServicesWhereInput[]
  id?: Prisma.StringFilter<"MentorServices"> | string
  mentorId?: Prisma.StringFilter<"MentorServices"> | string
  serviceId?: Prisma.StringFilter<"MentorServices"> | string
  price?: Prisma.IntFilter<"MentorServices"> | number
  currency?: Prisma.StringFilter<"MentorServices"> | string
  duration?: Prisma.IntFilter<"MentorServices"> | number
  isActive?: Prisma.BoolFilter<"MentorServices"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
  mentor?: Prisma.XOR<Prisma.MentorScalarRelationFilter, Prisma.MentorWhereInput>
  service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>
  appointments?: Prisma.AppointmentListRelationFilter
}

export type MentorServicesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mentor?: Prisma.MentorOrderByWithRelationInput
  service?: Prisma.ServicesOrderByWithRelationInput
  appointments?: Prisma.AppointmentOrderByRelationAggregateInput
}

export type MentorServicesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  mentorId_serviceId?: Prisma.MentorServicesMentorIdServiceIdCompoundUniqueInput
  AND?: Prisma.MentorServicesWhereInput | Prisma.MentorServicesWhereInput[]
  OR?: Prisma.MentorServicesWhereInput[]
  NOT?: Prisma.MentorServicesWhereInput | Prisma.MentorServicesWhereInput[]
  mentorId?: Prisma.StringFilter<"MentorServices"> | string
  serviceId?: Prisma.StringFilter<"MentorServices"> | string
  price?: Prisma.IntFilter<"MentorServices"> | number
  currency?: Prisma.StringFilter<"MentorServices"> | string
  duration?: Prisma.IntFilter<"MentorServices"> | number
  isActive?: Prisma.BoolFilter<"MentorServices"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
  mentor?: Prisma.XOR<Prisma.MentorScalarRelationFilter, Prisma.MentorWhereInput>
  service?: Prisma.XOR<Prisma.ServicesScalarRelationFilter, Prisma.ServicesWhereInput>
  appointments?: Prisma.AppointmentListRelationFilter
}, "id" | "mentorId_serviceId">

export type MentorServicesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MentorServicesCountOrderByAggregateInput
  _avg?: Prisma.MentorServicesAvgOrderByAggregateInput
  _max?: Prisma.MentorServicesMaxOrderByAggregateInput
  _min?: Prisma.MentorServicesMinOrderByAggregateInput
  _sum?: Prisma.MentorServicesSumOrderByAggregateInput
}

export type MentorServicesScalarWhereWithAggregatesInput = {
  AND?: Prisma.MentorServicesScalarWhereWithAggregatesInput | Prisma.MentorServicesScalarWhereWithAggregatesInput[]
  OR?: Prisma.MentorServicesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MentorServicesScalarWhereWithAggregatesInput | Prisma.MentorServicesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MentorServices"> | string
  mentorId?: Prisma.StringWithAggregatesFilter<"MentorServices"> | string
  serviceId?: Prisma.StringWithAggregatesFilter<"MentorServices"> | string
  price?: Prisma.IntWithAggregatesFilter<"MentorServices"> | number
  currency?: Prisma.StringWithAggregatesFilter<"MentorServices"> | string
  duration?: Prisma.IntWithAggregatesFilter<"MentorServices"> | number
  isActive?: Prisma.BoolWithAggregatesFilter<"MentorServices"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MentorServices"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MentorServices"> | Date | string
}

export type MentorServicesCreateInput = {
  id?: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mentor: Prisma.MentorCreateNestedOneWithoutServicesInput
  service: Prisma.ServicesCreateNestedOneWithoutMentorServicesInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput
}

export type MentorServicesUncheckedCreateInput = {
  id?: string
  mentorId: string
  serviceId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput
}

export type MentorServicesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentor?: Prisma.MentorUpdateOneRequiredWithoutServicesNestedInput
  service?: Prisma.ServicesUpdateOneRequiredWithoutMentorServicesNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput
}

export type MentorServicesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput
}

export type MentorServicesCreateManyInput = {
  id?: string
  mentorId: string
  serviceId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorServicesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorServicesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorServicesListRelationFilter = {
  every?: Prisma.MentorServicesWhereInput
  some?: Prisma.MentorServicesWhereInput
  none?: Prisma.MentorServicesWhereInput
}

export type MentorServicesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MentorServicesMentorIdServiceIdCompoundUniqueInput = {
  mentorId: string
  serviceId: string
}

export type MentorServicesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorServicesAvgOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type MentorServicesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorServicesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  serviceId?: Prisma.SortOrder
  price?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorServicesSumOrderByAggregateInput = {
  price?: Prisma.SortOrder
  duration?: Prisma.SortOrder
}

export type MentorServicesNullableScalarRelationFilter = {
  is?: Prisma.MentorServicesWhereInput | null
  isNot?: Prisma.MentorServicesWhereInput | null
}

export type MentorServicesCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput> | Prisma.MentorServicesCreateWithoutServiceInput[] | Prisma.MentorServicesUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutServiceInput | Prisma.MentorServicesCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.MentorServicesCreateManyServiceInputEnvelope
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
}

export type MentorServicesUncheckedCreateNestedManyWithoutServiceInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput> | Prisma.MentorServicesCreateWithoutServiceInput[] | Prisma.MentorServicesUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutServiceInput | Prisma.MentorServicesCreateOrConnectWithoutServiceInput[]
  createMany?: Prisma.MentorServicesCreateManyServiceInputEnvelope
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
}

export type MentorServicesUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput> | Prisma.MentorServicesCreateWithoutServiceInput[] | Prisma.MentorServicesUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutServiceInput | Prisma.MentorServicesCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.MentorServicesUpsertWithWhereUniqueWithoutServiceInput | Prisma.MentorServicesUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.MentorServicesCreateManyServiceInputEnvelope
  set?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  disconnect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  delete?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  update?: Prisma.MentorServicesUpdateWithWhereUniqueWithoutServiceInput | Prisma.MentorServicesUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.MentorServicesUpdateManyWithWhereWithoutServiceInput | Prisma.MentorServicesUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
}

export type MentorServicesUncheckedUpdateManyWithoutServiceNestedInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput> | Prisma.MentorServicesCreateWithoutServiceInput[] | Prisma.MentorServicesUncheckedCreateWithoutServiceInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutServiceInput | Prisma.MentorServicesCreateOrConnectWithoutServiceInput[]
  upsert?: Prisma.MentorServicesUpsertWithWhereUniqueWithoutServiceInput | Prisma.MentorServicesUpsertWithWhereUniqueWithoutServiceInput[]
  createMany?: Prisma.MentorServicesCreateManyServiceInputEnvelope
  set?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  disconnect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  delete?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  update?: Prisma.MentorServicesUpdateWithWhereUniqueWithoutServiceInput | Prisma.MentorServicesUpdateWithWhereUniqueWithoutServiceInput[]
  updateMany?: Prisma.MentorServicesUpdateManyWithWhereWithoutServiceInput | Prisma.MentorServicesUpdateManyWithWhereWithoutServiceInput[]
  deleteMany?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
}

export type MentorServicesCreateNestedManyWithoutMentorInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput> | Prisma.MentorServicesCreateWithoutMentorInput[] | Prisma.MentorServicesUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutMentorInput | Prisma.MentorServicesCreateOrConnectWithoutMentorInput[]
  createMany?: Prisma.MentorServicesCreateManyMentorInputEnvelope
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
}

export type MentorServicesUncheckedCreateNestedManyWithoutMentorInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput> | Prisma.MentorServicesCreateWithoutMentorInput[] | Prisma.MentorServicesUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutMentorInput | Prisma.MentorServicesCreateOrConnectWithoutMentorInput[]
  createMany?: Prisma.MentorServicesCreateManyMentorInputEnvelope
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
}

export type MentorServicesUpdateManyWithoutMentorNestedInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput> | Prisma.MentorServicesCreateWithoutMentorInput[] | Prisma.MentorServicesUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutMentorInput | Prisma.MentorServicesCreateOrConnectWithoutMentorInput[]
  upsert?: Prisma.MentorServicesUpsertWithWhereUniqueWithoutMentorInput | Prisma.MentorServicesUpsertWithWhereUniqueWithoutMentorInput[]
  createMany?: Prisma.MentorServicesCreateManyMentorInputEnvelope
  set?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  disconnect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  delete?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  update?: Prisma.MentorServicesUpdateWithWhereUniqueWithoutMentorInput | Prisma.MentorServicesUpdateWithWhereUniqueWithoutMentorInput[]
  updateMany?: Prisma.MentorServicesUpdateManyWithWhereWithoutMentorInput | Prisma.MentorServicesUpdateManyWithWhereWithoutMentorInput[]
  deleteMany?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
}

export type MentorServicesUncheckedUpdateManyWithoutMentorNestedInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput> | Prisma.MentorServicesCreateWithoutMentorInput[] | Prisma.MentorServicesUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutMentorInput | Prisma.MentorServicesCreateOrConnectWithoutMentorInput[]
  upsert?: Prisma.MentorServicesUpsertWithWhereUniqueWithoutMentorInput | Prisma.MentorServicesUpsertWithWhereUniqueWithoutMentorInput[]
  createMany?: Prisma.MentorServicesCreateManyMentorInputEnvelope
  set?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  disconnect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  delete?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  connect?: Prisma.MentorServicesWhereUniqueInput | Prisma.MentorServicesWhereUniqueInput[]
  update?: Prisma.MentorServicesUpdateWithWhereUniqueWithoutMentorInput | Prisma.MentorServicesUpdateWithWhereUniqueWithoutMentorInput[]
  updateMany?: Prisma.MentorServicesUpdateManyWithWhereWithoutMentorInput | Prisma.MentorServicesUpdateManyWithWhereWithoutMentorInput[]
  deleteMany?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type MentorServicesCreateNestedOneWithoutAppointmentsInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutAppointmentsInput
  connect?: Prisma.MentorServicesWhereUniqueInput
}

export type MentorServicesUpdateOneWithoutAppointmentsNestedInput = {
  create?: Prisma.XOR<Prisma.MentorServicesCreateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.MentorServicesCreateOrConnectWithoutAppointmentsInput
  upsert?: Prisma.MentorServicesUpsertWithoutAppointmentsInput
  disconnect?: Prisma.MentorServicesWhereInput | boolean
  delete?: Prisma.MentorServicesWhereInput | boolean
  connect?: Prisma.MentorServicesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorServicesUpdateToOneWithWhereWithoutAppointmentsInput, Prisma.MentorServicesUpdateWithoutAppointmentsInput>, Prisma.MentorServicesUncheckedUpdateWithoutAppointmentsInput>
}

export type MentorServicesCreateWithoutServiceInput = {
  id?: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mentor: Prisma.MentorCreateNestedOneWithoutServicesInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput
}

export type MentorServicesUncheckedCreateWithoutServiceInput = {
  id?: string
  mentorId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput
}

export type MentorServicesCreateOrConnectWithoutServiceInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput>
}

export type MentorServicesCreateManyServiceInputEnvelope = {
  data: Prisma.MentorServicesCreateManyServiceInput | Prisma.MentorServicesCreateManyServiceInput[]
  skipDuplicates?: boolean
}

export type MentorServicesUpsertWithWhereUniqueWithoutServiceInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  update: Prisma.XOR<Prisma.MentorServicesUpdateWithoutServiceInput, Prisma.MentorServicesUncheckedUpdateWithoutServiceInput>
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutServiceInput, Prisma.MentorServicesUncheckedCreateWithoutServiceInput>
}

export type MentorServicesUpdateWithWhereUniqueWithoutServiceInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  data: Prisma.XOR<Prisma.MentorServicesUpdateWithoutServiceInput, Prisma.MentorServicesUncheckedUpdateWithoutServiceInput>
}

export type MentorServicesUpdateManyWithWhereWithoutServiceInput = {
  where: Prisma.MentorServicesScalarWhereInput
  data: Prisma.XOR<Prisma.MentorServicesUpdateManyMutationInput, Prisma.MentorServicesUncheckedUpdateManyWithoutServiceInput>
}

export type MentorServicesScalarWhereInput = {
  AND?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
  OR?: Prisma.MentorServicesScalarWhereInput[]
  NOT?: Prisma.MentorServicesScalarWhereInput | Prisma.MentorServicesScalarWhereInput[]
  id?: Prisma.StringFilter<"MentorServices"> | string
  mentorId?: Prisma.StringFilter<"MentorServices"> | string
  serviceId?: Prisma.StringFilter<"MentorServices"> | string
  price?: Prisma.IntFilter<"MentorServices"> | number
  currency?: Prisma.StringFilter<"MentorServices"> | string
  duration?: Prisma.IntFilter<"MentorServices"> | number
  isActive?: Prisma.BoolFilter<"MentorServices"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorServices"> | Date | string
}

export type MentorServicesCreateWithoutMentorInput = {
  id?: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  service: Prisma.ServicesCreateNestedOneWithoutMentorServicesInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutServiceInput
}

export type MentorServicesUncheckedCreateWithoutMentorInput = {
  id?: string
  serviceId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutServiceInput
}

export type MentorServicesCreateOrConnectWithoutMentorInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput>
}

export type MentorServicesCreateManyMentorInputEnvelope = {
  data: Prisma.MentorServicesCreateManyMentorInput | Prisma.MentorServicesCreateManyMentorInput[]
  skipDuplicates?: boolean
}

export type MentorServicesUpsertWithWhereUniqueWithoutMentorInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  update: Prisma.XOR<Prisma.MentorServicesUpdateWithoutMentorInput, Prisma.MentorServicesUncheckedUpdateWithoutMentorInput>
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutMentorInput, Prisma.MentorServicesUncheckedCreateWithoutMentorInput>
}

export type MentorServicesUpdateWithWhereUniqueWithoutMentorInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  data: Prisma.XOR<Prisma.MentorServicesUpdateWithoutMentorInput, Prisma.MentorServicesUncheckedUpdateWithoutMentorInput>
}

export type MentorServicesUpdateManyWithWhereWithoutMentorInput = {
  where: Prisma.MentorServicesScalarWhereInput
  data: Prisma.XOR<Prisma.MentorServicesUpdateManyMutationInput, Prisma.MentorServicesUncheckedUpdateManyWithoutMentorInput>
}

export type MentorServicesCreateWithoutAppointmentsInput = {
  id?: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mentor: Prisma.MentorCreateNestedOneWithoutServicesInput
  service: Prisma.ServicesCreateNestedOneWithoutMentorServicesInput
}

export type MentorServicesUncheckedCreateWithoutAppointmentsInput = {
  id?: string
  mentorId: string
  serviceId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorServicesCreateOrConnectWithoutAppointmentsInput = {
  where: Prisma.MentorServicesWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedCreateWithoutAppointmentsInput>
}

export type MentorServicesUpsertWithoutAppointmentsInput = {
  update: Prisma.XOR<Prisma.MentorServicesUpdateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedUpdateWithoutAppointmentsInput>
  create: Prisma.XOR<Prisma.MentorServicesCreateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedCreateWithoutAppointmentsInput>
  where?: Prisma.MentorServicesWhereInput
}

export type MentorServicesUpdateToOneWithWhereWithoutAppointmentsInput = {
  where?: Prisma.MentorServicesWhereInput
  data: Prisma.XOR<Prisma.MentorServicesUpdateWithoutAppointmentsInput, Prisma.MentorServicesUncheckedUpdateWithoutAppointmentsInput>
}

export type MentorServicesUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentor?: Prisma.MentorUpdateOneRequiredWithoutServicesNestedInput
  service?: Prisma.ServicesUpdateOneRequiredWithoutMentorServicesNestedInput
}

export type MentorServicesUncheckedUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorServicesCreateManyServiceInput = {
  id?: string
  mentorId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorServicesUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentor?: Prisma.MentorUpdateOneRequiredWithoutServicesNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput
}

export type MentorServicesUncheckedUpdateWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput
}

export type MentorServicesUncheckedUpdateManyWithoutServiceInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorServicesCreateManyMentorInput = {
  id?: string
  serviceId: string
  price: number
  currency?: string
  duration: number
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorServicesUpdateWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  service?: Prisma.ServicesUpdateOneRequiredWithoutMentorServicesNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutServiceNestedInput
}

export type MentorServicesUncheckedUpdateWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutServiceNestedInput
}

export type MentorServicesUncheckedUpdateManyWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  serviceId?: Prisma.StringFieldUpdateOperationsInput | string
  price?: Prisma.IntFieldUpdateOperationsInput | number
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  duration?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MentorServicesCountOutputType
 */

export type MentorServicesCountOutputType = {
  appointments: number
}

export type MentorServicesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  appointments?: boolean | MentorServicesCountOutputTypeCountAppointmentsArgs
}

/**
 * MentorServicesCountOutputType without action
 */
export type MentorServicesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServicesCountOutputType
   */
  select?: Prisma.MentorServicesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MentorServicesCountOutputType without action
 */
export type MentorServicesCountOutputTypeCountAppointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppointmentWhereInput
}


export type MentorServicesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  serviceId?: boolean
  price?: boolean
  currency?: boolean
  duration?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  appointments?: boolean | Prisma.MentorServices$appointmentsArgs<ExtArgs>
  _count?: boolean | Prisma.MentorServicesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorServices"]>

export type MentorServicesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  serviceId?: boolean
  price?: boolean
  currency?: boolean
  duration?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorServices"]>

export type MentorServicesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  serviceId?: boolean
  price?: boolean
  currency?: boolean
  duration?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorServices"]>

export type MentorServicesSelectScalar = {
  id?: boolean
  mentorId?: boolean
  serviceId?: boolean
  price?: boolean
  currency?: boolean
  duration?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MentorServicesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mentorId" | "serviceId" | "price" | "currency" | "duration" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["mentorServices"]>
export type MentorServicesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
  appointments?: boolean | Prisma.MentorServices$appointmentsArgs<ExtArgs>
  _count?: boolean | Prisma.MentorServicesCountOutputTypeDefaultArgs<ExtArgs>
}
export type MentorServicesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
}
export type MentorServicesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
  service?: boolean | Prisma.ServicesDefaultArgs<ExtArgs>
}

export type $MentorServicesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MentorServices"
  objects: {
    mentor: Prisma.$MentorPayload<ExtArgs>
    service: Prisma.$ServicesPayload<ExtArgs>
    appointments: Prisma.$AppointmentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    mentorId: string
    serviceId: string
    price: number
    currency: string
    duration: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mentorServices"]>
  composites: {}
}

export type MentorServicesGetPayload<S extends boolean | null | undefined | MentorServicesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload, S>

export type MentorServicesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MentorServicesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MentorServicesCountAggregateInputType | true
  }

export interface MentorServicesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MentorServices'], meta: { name: 'MentorServices' } }
  /**
   * Find zero or one MentorServices that matches the filter.
   * @param {MentorServicesFindUniqueArgs} args - Arguments to find a MentorServices
   * @example
   * // Get one MentorServices
   * const mentorServices = await prisma.mentorServices.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MentorServicesFindUniqueArgs>(args: Prisma.SelectSubset<T, MentorServicesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MentorServices that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MentorServicesFindUniqueOrThrowArgs} args - Arguments to find a MentorServices
   * @example
   * // Get one MentorServices
   * const mentorServices = await prisma.mentorServices.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MentorServicesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MentorServicesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MentorServices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesFindFirstArgs} args - Arguments to find a MentorServices
   * @example
   * // Get one MentorServices
   * const mentorServices = await prisma.mentorServices.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MentorServicesFindFirstArgs>(args?: Prisma.SelectSubset<T, MentorServicesFindFirstArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MentorServices that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesFindFirstOrThrowArgs} args - Arguments to find a MentorServices
   * @example
   * // Get one MentorServices
   * const mentorServices = await prisma.mentorServices.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MentorServicesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MentorServicesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MentorServices that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MentorServices
   * const mentorServices = await prisma.mentorServices.findMany()
   * 
   * // Get first 10 MentorServices
   * const mentorServices = await prisma.mentorServices.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mentorServicesWithIdOnly = await prisma.mentorServices.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MentorServicesFindManyArgs>(args?: Prisma.SelectSubset<T, MentorServicesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MentorServices.
   * @param {MentorServicesCreateArgs} args - Arguments to create a MentorServices.
   * @example
   * // Create one MentorServices
   * const MentorServices = await prisma.mentorServices.create({
   *   data: {
   *     // ... data to create a MentorServices
   *   }
   * })
   * 
   */
  create<T extends MentorServicesCreateArgs>(args: Prisma.SelectSubset<T, MentorServicesCreateArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MentorServices.
   * @param {MentorServicesCreateManyArgs} args - Arguments to create many MentorServices.
   * @example
   * // Create many MentorServices
   * const mentorServices = await prisma.mentorServices.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MentorServicesCreateManyArgs>(args?: Prisma.SelectSubset<T, MentorServicesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MentorServices and returns the data saved in the database.
   * @param {MentorServicesCreateManyAndReturnArgs} args - Arguments to create many MentorServices.
   * @example
   * // Create many MentorServices
   * const mentorServices = await prisma.mentorServices.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MentorServices and only return the `id`
   * const mentorServicesWithIdOnly = await prisma.mentorServices.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MentorServicesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MentorServicesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MentorServices.
   * @param {MentorServicesDeleteArgs} args - Arguments to delete one MentorServices.
   * @example
   * // Delete one MentorServices
   * const MentorServices = await prisma.mentorServices.delete({
   *   where: {
   *     // ... filter to delete one MentorServices
   *   }
   * })
   * 
   */
  delete<T extends MentorServicesDeleteArgs>(args: Prisma.SelectSubset<T, MentorServicesDeleteArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MentorServices.
   * @param {MentorServicesUpdateArgs} args - Arguments to update one MentorServices.
   * @example
   * // Update one MentorServices
   * const mentorServices = await prisma.mentorServices.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MentorServicesUpdateArgs>(args: Prisma.SelectSubset<T, MentorServicesUpdateArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MentorServices.
   * @param {MentorServicesDeleteManyArgs} args - Arguments to filter MentorServices to delete.
   * @example
   * // Delete a few MentorServices
   * const { count } = await prisma.mentorServices.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MentorServicesDeleteManyArgs>(args?: Prisma.SelectSubset<T, MentorServicesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MentorServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MentorServices
   * const mentorServices = await prisma.mentorServices.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MentorServicesUpdateManyArgs>(args: Prisma.SelectSubset<T, MentorServicesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MentorServices and returns the data updated in the database.
   * @param {MentorServicesUpdateManyAndReturnArgs} args - Arguments to update many MentorServices.
   * @example
   * // Update many MentorServices
   * const mentorServices = await prisma.mentorServices.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MentorServices and only return the `id`
   * const mentorServicesWithIdOnly = await prisma.mentorServices.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MentorServicesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MentorServicesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MentorServices.
   * @param {MentorServicesUpsertArgs} args - Arguments to update or create a MentorServices.
   * @example
   * // Update or create a MentorServices
   * const mentorServices = await prisma.mentorServices.upsert({
   *   create: {
   *     // ... data to create a MentorServices
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MentorServices we want to update
   *   }
   * })
   */
  upsert<T extends MentorServicesUpsertArgs>(args: Prisma.SelectSubset<T, MentorServicesUpsertArgs<ExtArgs>>): Prisma.Prisma__MentorServicesClient<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MentorServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesCountArgs} args - Arguments to filter MentorServices to count.
   * @example
   * // Count the number of MentorServices
   * const count = await prisma.mentorServices.count({
   *   where: {
   *     // ... the filter for the MentorServices we want to count
   *   }
   * })
  **/
  count<T extends MentorServicesCountArgs>(
    args?: Prisma.Subset<T, MentorServicesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MentorServicesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MentorServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MentorServicesAggregateArgs>(args: Prisma.Subset<T, MentorServicesAggregateArgs>): Prisma.PrismaPromise<GetMentorServicesAggregateType<T>>

  /**
   * Group by MentorServices.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorServicesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MentorServicesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MentorServicesGroupByArgs['orderBy'] }
      : { orderBy?: MentorServicesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MentorServicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMentorServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MentorServices model
 */
readonly fields: MentorServicesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MentorServices.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MentorServicesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mentor<T extends Prisma.MentorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MentorDefaultArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  service<T extends Prisma.ServicesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ServicesDefaultArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  appointments<T extends Prisma.MentorServices$appointmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MentorServices$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MentorServices model
 */
export interface MentorServicesFieldRefs {
  readonly id: Prisma.FieldRef<"MentorServices", 'String'>
  readonly mentorId: Prisma.FieldRef<"MentorServices", 'String'>
  readonly serviceId: Prisma.FieldRef<"MentorServices", 'String'>
  readonly price: Prisma.FieldRef<"MentorServices", 'Int'>
  readonly currency: Prisma.FieldRef<"MentorServices", 'String'>
  readonly duration: Prisma.FieldRef<"MentorServices", 'Int'>
  readonly isActive: Prisma.FieldRef<"MentorServices", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"MentorServices", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MentorServices", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MentorServices findUnique
 */
export type MentorServicesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter, which MentorServices to fetch.
   */
  where: Prisma.MentorServicesWhereUniqueInput
}

/**
 * MentorServices findUniqueOrThrow
 */
export type MentorServicesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter, which MentorServices to fetch.
   */
  where: Prisma.MentorServicesWhereUniqueInput
}

/**
 * MentorServices findFirst
 */
export type MentorServicesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter, which MentorServices to fetch.
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorServices to fetch.
   */
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MentorServices.
   */
  cursor?: Prisma.MentorServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MentorServices.
   */
  distinct?: Prisma.MentorServicesScalarFieldEnum | Prisma.MentorServicesScalarFieldEnum[]
}

/**
 * MentorServices findFirstOrThrow
 */
export type MentorServicesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter, which MentorServices to fetch.
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorServices to fetch.
   */
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MentorServices.
   */
  cursor?: Prisma.MentorServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorServices.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MentorServices.
   */
  distinct?: Prisma.MentorServicesScalarFieldEnum | Prisma.MentorServicesScalarFieldEnum[]
}

/**
 * MentorServices findMany
 */
export type MentorServicesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter, which MentorServices to fetch.
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorServices to fetch.
   */
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MentorServices.
   */
  cursor?: Prisma.MentorServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorServices from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorServices.
   */
  skip?: number
  distinct?: Prisma.MentorServicesScalarFieldEnum | Prisma.MentorServicesScalarFieldEnum[]
}

/**
 * MentorServices create
 */
export type MentorServicesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * The data needed to create a MentorServices.
   */
  data: Prisma.XOR<Prisma.MentorServicesCreateInput, Prisma.MentorServicesUncheckedCreateInput>
}

/**
 * MentorServices createMany
 */
export type MentorServicesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MentorServices.
   */
  data: Prisma.MentorServicesCreateManyInput | Prisma.MentorServicesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MentorServices createManyAndReturn
 */
export type MentorServicesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * The data used to create many MentorServices.
   */
  data: Prisma.MentorServicesCreateManyInput | Prisma.MentorServicesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MentorServices update
 */
export type MentorServicesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * The data needed to update a MentorServices.
   */
  data: Prisma.XOR<Prisma.MentorServicesUpdateInput, Prisma.MentorServicesUncheckedUpdateInput>
  /**
   * Choose, which MentorServices to update.
   */
  where: Prisma.MentorServicesWhereUniqueInput
}

/**
 * MentorServices updateMany
 */
export type MentorServicesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MentorServices.
   */
  data: Prisma.XOR<Prisma.MentorServicesUpdateManyMutationInput, Prisma.MentorServicesUncheckedUpdateManyInput>
  /**
   * Filter which MentorServices to update
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * Limit how many MentorServices to update.
   */
  limit?: number
}

/**
 * MentorServices updateManyAndReturn
 */
export type MentorServicesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * The data used to update MentorServices.
   */
  data: Prisma.XOR<Prisma.MentorServicesUpdateManyMutationInput, Prisma.MentorServicesUncheckedUpdateManyInput>
  /**
   * Filter which MentorServices to update
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * Limit how many MentorServices to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MentorServices upsert
 */
export type MentorServicesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * The filter to search for the MentorServices to update in case it exists.
   */
  where: Prisma.MentorServicesWhereUniqueInput
  /**
   * In case the MentorServices found by the `where` argument doesn't exist, create a new MentorServices with this data.
   */
  create: Prisma.XOR<Prisma.MentorServicesCreateInput, Prisma.MentorServicesUncheckedCreateInput>
  /**
   * In case the MentorServices was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MentorServicesUpdateInput, Prisma.MentorServicesUncheckedUpdateInput>
}

/**
 * MentorServices delete
 */
export type MentorServicesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  /**
   * Filter which MentorServices to delete.
   */
  where: Prisma.MentorServicesWhereUniqueInput
}

/**
 * MentorServices deleteMany
 */
export type MentorServicesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MentorServices to delete
   */
  where?: Prisma.MentorServicesWhereInput
  /**
   * Limit how many MentorServices to delete.
   */
  limit?: number
}

/**
 * MentorServices.appointments
 */
export type MentorServices$appointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  where?: Prisma.AppointmentWhereInput
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  cursor?: Prisma.AppointmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * MentorServices without action
 */
export type MentorServicesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
}
