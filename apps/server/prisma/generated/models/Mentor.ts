
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Mentor` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Mentor
 * 
 */
export type MentorModel = runtime.Types.Result.DefaultSelection<Prisma.$MentorPayload>

export type AggregateMentor = {
  _count: MentorCountAggregateOutputType | null
  _min: MentorMinAggregateOutputType | null
  _max: MentorMaxAggregateOutputType | null
}

export type MentorMinAggregateOutputType = {
  id: string | null
  about: string | null
  timezone: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorMaxAggregateOutputType = {
  id: string | null
  about: string | null
  timezone: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorCountAggregateOutputType = {
  id: number
  about: number
  languages: number
  timezone: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MentorMinAggregateInputType = {
  id?: true
  about?: true
  timezone?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorMaxAggregateInputType = {
  id?: true
  about?: true
  timezone?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorCountAggregateInputType = {
  id?: true
  about?: true
  languages?: true
  timezone?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MentorAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Mentor to aggregate.
   */
  where?: Prisma.MentorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Mentors to fetch.
   */
  orderBy?: Prisma.MentorOrderByWithRelationInput | Prisma.MentorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MentorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Mentors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Mentors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Mentors
  **/
  _count?: true | MentorCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MentorMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MentorMaxAggregateInputType
}

export type GetMentorAggregateType<T extends MentorAggregateArgs> = {
      [P in keyof T & keyof AggregateMentor]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMentor[P]>
    : Prisma.GetScalarType<T[P], AggregateMentor[P]>
}




export type MentorGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorWhereInput
  orderBy?: Prisma.MentorOrderByWithAggregationInput | Prisma.MentorOrderByWithAggregationInput[]
  by: Prisma.MentorScalarFieldEnum[] | Prisma.MentorScalarFieldEnum
  having?: Prisma.MentorScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MentorCountAggregateInputType | true
  _min?: MentorMinAggregateInputType
  _max?: MentorMaxAggregateInputType
}

export type MentorGroupByOutputType = {
  id: string
  about: string
  languages: string[]
  timezone: string
  userId: string
  createdAt: Date
  updatedAt: Date
  _count: MentorCountAggregateOutputType | null
  _min: MentorMinAggregateOutputType | null
  _max: MentorMaxAggregateOutputType | null
}

type GetMentorGroupByPayload<T extends MentorGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MentorGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MentorGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MentorGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MentorGroupByOutputType[P]>
      }
    >
  > 



export type MentorWhereInput = {
  AND?: Prisma.MentorWhereInput | Prisma.MentorWhereInput[]
  OR?: Prisma.MentorWhereInput[]
  NOT?: Prisma.MentorWhereInput | Prisma.MentorWhereInput[]
  id?: Prisma.StringFilter<"Mentor"> | string
  about?: Prisma.StringFilter<"Mentor"> | string
  languages?: Prisma.StringNullableListFilter<"Mentor">
  timezone?: Prisma.StringFilter<"Mentor"> | string
  userId?: Prisma.StringFilter<"Mentor"> | string
  createdAt?: Prisma.DateTimeFilter<"Mentor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Mentor"> | Date | string
  skills?: Prisma.MentorSkillsListRelationFilter
  availability?: Prisma.MentorAvailabilityListRelationFilter
  services?: Prisma.MentorServicesListRelationFilter
  webinars?: Prisma.WebinarListRelationFilter
  appointments?: Prisma.AppointmentListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MentorOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  about?: Prisma.SortOrder
  languages?: Prisma.SortOrder
  timezone?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  skills?: Prisma.MentorSkillsOrderByRelationAggregateInput
  availability?: Prisma.MentorAvailabilityOrderByRelationAggregateInput
  services?: Prisma.MentorServicesOrderByRelationAggregateInput
  webinars?: Prisma.WebinarOrderByRelationAggregateInput
  appointments?: Prisma.AppointmentOrderByRelationAggregateInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type MentorWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId?: string
  AND?: Prisma.MentorWhereInput | Prisma.MentorWhereInput[]
  OR?: Prisma.MentorWhereInput[]
  NOT?: Prisma.MentorWhereInput | Prisma.MentorWhereInput[]
  about?: Prisma.StringFilter<"Mentor"> | string
  languages?: Prisma.StringNullableListFilter<"Mentor">
  timezone?: Prisma.StringFilter<"Mentor"> | string
  createdAt?: Prisma.DateTimeFilter<"Mentor"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Mentor"> | Date | string
  skills?: Prisma.MentorSkillsListRelationFilter
  availability?: Prisma.MentorAvailabilityListRelationFilter
  services?: Prisma.MentorServicesListRelationFilter
  webinars?: Prisma.WebinarListRelationFilter
  appointments?: Prisma.AppointmentListRelationFilter
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "userId">

export type MentorOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  about?: Prisma.SortOrder
  languages?: Prisma.SortOrder
  timezone?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MentorCountOrderByAggregateInput
  _max?: Prisma.MentorMaxOrderByAggregateInput
  _min?: Prisma.MentorMinOrderByAggregateInput
}

export type MentorScalarWhereWithAggregatesInput = {
  AND?: Prisma.MentorScalarWhereWithAggregatesInput | Prisma.MentorScalarWhereWithAggregatesInput[]
  OR?: Prisma.MentorScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MentorScalarWhereWithAggregatesInput | Prisma.MentorScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Mentor"> | string
  about?: Prisma.StringWithAggregatesFilter<"Mentor"> | string
  languages?: Prisma.StringNullableListFilter<"Mentor">
  timezone?: Prisma.StringWithAggregatesFilter<"Mentor"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Mentor"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Mentor"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Mentor"> | Date | string
}

export type MentorCreateInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateManyInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorNullableScalarRelationFilter = {
  is?: Prisma.MentorWhereInput | null
  isNot?: Prisma.MentorWhereInput | null
}

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type MentorCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  about?: Prisma.SortOrder
  languages?: Prisma.SortOrder
  timezone?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  about?: Prisma.SortOrder
  timezone?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  about?: Prisma.SortOrder
  timezone?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorScalarRelationFilter = {
  is?: Prisma.MentorWhereInput
  isNot?: Prisma.MentorWhereInput
}

export type MentorCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutUserInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUncheckedCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutUserInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutUserInput
  upsert?: Prisma.MentorUpsertWithoutUserInput
  disconnect?: Prisma.MentorWhereInput | boolean
  delete?: Prisma.MentorWhereInput | boolean
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutUserInput, Prisma.MentorUpdateWithoutUserInput>, Prisma.MentorUncheckedUpdateWithoutUserInput>
}

export type MentorUncheckedUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutUserInput
  upsert?: Prisma.MentorUpsertWithoutUserInput
  disconnect?: Prisma.MentorWhereInput | boolean
  delete?: Prisma.MentorWhereInput | boolean
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutUserInput, Prisma.MentorUpdateWithoutUserInput>, Prisma.MentorUncheckedUpdateWithoutUserInput>
}

export type MentorCreatelanguagesInput = {
  set: string[]
}

export type MentorUpdatelanguagesInput = {
  set?: string[]
  push?: string | string[]
}

export type MentorCreateNestedOneWithoutSkillsInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutSkillsInput, Prisma.MentorUncheckedCreateWithoutSkillsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutSkillsInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneRequiredWithoutSkillsNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutSkillsInput, Prisma.MentorUncheckedCreateWithoutSkillsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutSkillsInput
  upsert?: Prisma.MentorUpsertWithoutSkillsInput
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutSkillsInput, Prisma.MentorUpdateWithoutSkillsInput>, Prisma.MentorUncheckedUpdateWithoutSkillsInput>
}

export type MentorCreateNestedOneWithoutServicesInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutServicesInput, Prisma.MentorUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutServicesInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneRequiredWithoutServicesNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutServicesInput, Prisma.MentorUncheckedCreateWithoutServicesInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutServicesInput
  upsert?: Prisma.MentorUpsertWithoutServicesInput
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutServicesInput, Prisma.MentorUpdateWithoutServicesInput>, Prisma.MentorUncheckedUpdateWithoutServicesInput>
}

export type MentorCreateNestedOneWithoutAvailabilityInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutAvailabilityInput, Prisma.MentorUncheckedCreateWithoutAvailabilityInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutAvailabilityInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneRequiredWithoutAvailabilityNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutAvailabilityInput, Prisma.MentorUncheckedCreateWithoutAvailabilityInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutAvailabilityInput
  upsert?: Prisma.MentorUpsertWithoutAvailabilityInput
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutAvailabilityInput, Prisma.MentorUpdateWithoutAvailabilityInput>, Prisma.MentorUncheckedUpdateWithoutAvailabilityInput>
}

export type MentorCreateNestedOneWithoutWebinarsInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutWebinarsInput, Prisma.MentorUncheckedCreateWithoutWebinarsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutWebinarsInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneRequiredWithoutWebinarsNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutWebinarsInput, Prisma.MentorUncheckedCreateWithoutWebinarsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutWebinarsInput
  upsert?: Prisma.MentorUpsertWithoutWebinarsInput
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutWebinarsInput, Prisma.MentorUpdateWithoutWebinarsInput>, Prisma.MentorUncheckedUpdateWithoutWebinarsInput>
}

export type MentorCreateNestedOneWithoutAppointmentsInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutAppointmentsInput, Prisma.MentorUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutAppointmentsInput
  connect?: Prisma.MentorWhereUniqueInput
}

export type MentorUpdateOneRequiredWithoutAppointmentsNestedInput = {
  create?: Prisma.XOR<Prisma.MentorCreateWithoutAppointmentsInput, Prisma.MentorUncheckedCreateWithoutAppointmentsInput>
  connectOrCreate?: Prisma.MentorCreateOrConnectWithoutAppointmentsInput
  upsert?: Prisma.MentorUpsertWithoutAppointmentsInput
  connect?: Prisma.MentorWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MentorUpdateToOneWithWhereWithoutAppointmentsInput, Prisma.MentorUpdateWithoutAppointmentsInput>, Prisma.MentorUncheckedUpdateWithoutAppointmentsInput>
}

export type MentorCreateWithoutUserInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
}

export type MentorUncheckedCreateWithoutUserInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutUserInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
}

export type MentorUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutUserInput, Prisma.MentorUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutUserInput, Prisma.MentorUncheckedCreateWithoutUserInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutUserInput, Prisma.MentorUncheckedUpdateWithoutUserInput>
}

export type MentorUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateWithoutSkillsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateWithoutSkillsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutSkillsInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutSkillsInput, Prisma.MentorUncheckedCreateWithoutSkillsInput>
}

export type MentorUpsertWithoutSkillsInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutSkillsInput, Prisma.MentorUncheckedUpdateWithoutSkillsInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutSkillsInput, Prisma.MentorUncheckedCreateWithoutSkillsInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutSkillsInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutSkillsInput, Prisma.MentorUncheckedUpdateWithoutSkillsInput>
}

export type MentorUpdateWithoutSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutSkillsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateWithoutServicesInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateWithoutServicesInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutServicesInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutServicesInput, Prisma.MentorUncheckedCreateWithoutServicesInput>
}

export type MentorUpsertWithoutServicesInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutServicesInput, Prisma.MentorUncheckedUpdateWithoutServicesInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutServicesInput, Prisma.MentorUncheckedCreateWithoutServicesInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutServicesInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutServicesInput, Prisma.MentorUncheckedUpdateWithoutServicesInput>
}

export type MentorUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateWithoutAvailabilityInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateWithoutAvailabilityInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutAvailabilityInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutAvailabilityInput, Prisma.MentorUncheckedCreateWithoutAvailabilityInput>
}

export type MentorUpsertWithoutAvailabilityInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutAvailabilityInput, Prisma.MentorUncheckedUpdateWithoutAvailabilityInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutAvailabilityInput, Prisma.MentorUncheckedCreateWithoutAvailabilityInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutAvailabilityInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutAvailabilityInput, Prisma.MentorUncheckedUpdateWithoutAvailabilityInput>
}

export type MentorUpdateWithoutAvailabilityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutAvailabilityInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateWithoutWebinarsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateWithoutWebinarsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  appointments?: Prisma.AppointmentUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutWebinarsInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutWebinarsInput, Prisma.MentorUncheckedCreateWithoutWebinarsInput>
}

export type MentorUpsertWithoutWebinarsInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutWebinarsInput, Prisma.MentorUncheckedUpdateWithoutWebinarsInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutWebinarsInput, Prisma.MentorUncheckedCreateWithoutWebinarsInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutWebinarsInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutWebinarsInput, Prisma.MentorUncheckedUpdateWithoutWebinarsInput>
}

export type MentorUpdateWithoutWebinarsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutWebinarsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  appointments?: Prisma.AppointmentUncheckedUpdateManyWithoutMentorNestedInput
}

export type MentorCreateWithoutAppointmentsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarCreateNestedManyWithoutMentorInput
  user: Prisma.UserCreateNestedOneWithoutMentorInput
}

export type MentorUncheckedCreateWithoutAppointmentsInput = {
  id?: string
  about: string
  languages?: Prisma.MentorCreatelanguagesInput | string[]
  timezone: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  skills?: Prisma.MentorSkillsUncheckedCreateNestedManyWithoutMentorInput
  availability?: Prisma.MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput
  services?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutMentorInput
  webinars?: Prisma.WebinarUncheckedCreateNestedManyWithoutMentorInput
}

export type MentorCreateOrConnectWithoutAppointmentsInput = {
  where: Prisma.MentorWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorCreateWithoutAppointmentsInput, Prisma.MentorUncheckedCreateWithoutAppointmentsInput>
}

export type MentorUpsertWithoutAppointmentsInput = {
  update: Prisma.XOR<Prisma.MentorUpdateWithoutAppointmentsInput, Prisma.MentorUncheckedUpdateWithoutAppointmentsInput>
  create: Prisma.XOR<Prisma.MentorCreateWithoutAppointmentsInput, Prisma.MentorUncheckedCreateWithoutAppointmentsInput>
  where?: Prisma.MentorWhereInput
}

export type MentorUpdateToOneWithWhereWithoutAppointmentsInput = {
  where?: Prisma.MentorWhereInput
  data: Prisma.XOR<Prisma.MentorUpdateWithoutAppointmentsInput, Prisma.MentorUncheckedUpdateWithoutAppointmentsInput>
}

export type MentorUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUpdateManyWithoutMentorNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutMentorNestedInput
}

export type MentorUncheckedUpdateWithoutAppointmentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  about?: Prisma.StringFieldUpdateOperationsInput | string
  languages?: Prisma.MentorUpdatelanguagesInput | string[]
  timezone?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  skills?: Prisma.MentorSkillsUncheckedUpdateManyWithoutMentorNestedInput
  availability?: Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput
  services?: Prisma.MentorServicesUncheckedUpdateManyWithoutMentorNestedInput
  webinars?: Prisma.WebinarUncheckedUpdateManyWithoutMentorNestedInput
}


/**
 * Count Type MentorCountOutputType
 */

export type MentorCountOutputType = {
  skills: number
  availability: number
  services: number
  webinars: number
  appointments: number
}

export type MentorCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  skills?: boolean | MentorCountOutputTypeCountSkillsArgs
  availability?: boolean | MentorCountOutputTypeCountAvailabilityArgs
  services?: boolean | MentorCountOutputTypeCountServicesArgs
  webinars?: boolean | MentorCountOutputTypeCountWebinarsArgs
  appointments?: boolean | MentorCountOutputTypeCountAppointmentsArgs
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorCountOutputType
   */
  select?: Prisma.MentorCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeCountSkillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorSkillsWhereInput
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeCountAvailabilityArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorAvailabilityWhereInput
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeCountServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorServicesWhereInput
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeCountWebinarsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WebinarWhereInput
}

/**
 * MentorCountOutputType without action
 */
export type MentorCountOutputTypeCountAppointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AppointmentWhereInput
}


export type MentorSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  about?: boolean
  languages?: boolean
  timezone?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  skills?: boolean | Prisma.Mentor$skillsArgs<ExtArgs>
  availability?: boolean | Prisma.Mentor$availabilityArgs<ExtArgs>
  services?: boolean | Prisma.Mentor$servicesArgs<ExtArgs>
  webinars?: boolean | Prisma.Mentor$webinarsArgs<ExtArgs>
  appointments?: boolean | Prisma.Mentor$appointmentsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.MentorCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentor"]>

export type MentorSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  about?: boolean
  languages?: boolean
  timezone?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentor"]>

export type MentorSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  about?: boolean
  languages?: boolean
  timezone?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentor"]>

export type MentorSelectScalar = {
  id?: boolean
  about?: boolean
  languages?: boolean
  timezone?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MentorOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "about" | "languages" | "timezone" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["mentor"]>
export type MentorInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  skills?: boolean | Prisma.Mentor$skillsArgs<ExtArgs>
  availability?: boolean | Prisma.Mentor$availabilityArgs<ExtArgs>
  services?: boolean | Prisma.Mentor$servicesArgs<ExtArgs>
  webinars?: boolean | Prisma.Mentor$webinarsArgs<ExtArgs>
  appointments?: boolean | Prisma.Mentor$appointmentsArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.MentorCountOutputTypeDefaultArgs<ExtArgs>
}
export type MentorIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type MentorIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MentorPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Mentor"
  objects: {
    skills: Prisma.$MentorSkillsPayload<ExtArgs>[]
    availability: Prisma.$MentorAvailabilityPayload<ExtArgs>[]
    services: Prisma.$MentorServicesPayload<ExtArgs>[]
    webinars: Prisma.$WebinarPayload<ExtArgs>[]
    appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    about: string
    languages: string[]
    timezone: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mentor"]>
  composites: {}
}

export type MentorGetPayload<S extends boolean | null | undefined | MentorDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MentorPayload, S>

export type MentorCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MentorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MentorCountAggregateInputType | true
  }

export interface MentorDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mentor'], meta: { name: 'Mentor' } }
  /**
   * Find zero or one Mentor that matches the filter.
   * @param {MentorFindUniqueArgs} args - Arguments to find a Mentor
   * @example
   * // Get one Mentor
   * const mentor = await prisma.mentor.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MentorFindUniqueArgs>(args: Prisma.SelectSubset<T, MentorFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Mentor that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MentorFindUniqueOrThrowArgs} args - Arguments to find a Mentor
   * @example
   * // Get one Mentor
   * const mentor = await prisma.mentor.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MentorFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MentorFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Mentor that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorFindFirstArgs} args - Arguments to find a Mentor
   * @example
   * // Get one Mentor
   * const mentor = await prisma.mentor.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MentorFindFirstArgs>(args?: Prisma.SelectSubset<T, MentorFindFirstArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Mentor that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorFindFirstOrThrowArgs} args - Arguments to find a Mentor
   * @example
   * // Get one Mentor
   * const mentor = await prisma.mentor.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MentorFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MentorFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Mentors that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Mentors
   * const mentors = await prisma.mentor.findMany()
   * 
   * // Get first 10 Mentors
   * const mentors = await prisma.mentor.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mentorWithIdOnly = await prisma.mentor.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MentorFindManyArgs>(args?: Prisma.SelectSubset<T, MentorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Mentor.
   * @param {MentorCreateArgs} args - Arguments to create a Mentor.
   * @example
   * // Create one Mentor
   * const Mentor = await prisma.mentor.create({
   *   data: {
   *     // ... data to create a Mentor
   *   }
   * })
   * 
   */
  create<T extends MentorCreateArgs>(args: Prisma.SelectSubset<T, MentorCreateArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Mentors.
   * @param {MentorCreateManyArgs} args - Arguments to create many Mentors.
   * @example
   * // Create many Mentors
   * const mentor = await prisma.mentor.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MentorCreateManyArgs>(args?: Prisma.SelectSubset<T, MentorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Mentors and returns the data saved in the database.
   * @param {MentorCreateManyAndReturnArgs} args - Arguments to create many Mentors.
   * @example
   * // Create many Mentors
   * const mentor = await prisma.mentor.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Mentors and only return the `id`
   * const mentorWithIdOnly = await prisma.mentor.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MentorCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MentorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Mentor.
   * @param {MentorDeleteArgs} args - Arguments to delete one Mentor.
   * @example
   * // Delete one Mentor
   * const Mentor = await prisma.mentor.delete({
   *   where: {
   *     // ... filter to delete one Mentor
   *   }
   * })
   * 
   */
  delete<T extends MentorDeleteArgs>(args: Prisma.SelectSubset<T, MentorDeleteArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Mentor.
   * @param {MentorUpdateArgs} args - Arguments to update one Mentor.
   * @example
   * // Update one Mentor
   * const mentor = await prisma.mentor.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MentorUpdateArgs>(args: Prisma.SelectSubset<T, MentorUpdateArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Mentors.
   * @param {MentorDeleteManyArgs} args - Arguments to filter Mentors to delete.
   * @example
   * // Delete a few Mentors
   * const { count } = await prisma.mentor.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MentorDeleteManyArgs>(args?: Prisma.SelectSubset<T, MentorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Mentors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Mentors
   * const mentor = await prisma.mentor.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MentorUpdateManyArgs>(args: Prisma.SelectSubset<T, MentorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Mentors and returns the data updated in the database.
   * @param {MentorUpdateManyAndReturnArgs} args - Arguments to update many Mentors.
   * @example
   * // Update many Mentors
   * const mentor = await prisma.mentor.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Mentors and only return the `id`
   * const mentorWithIdOnly = await prisma.mentor.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MentorUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MentorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Mentor.
   * @param {MentorUpsertArgs} args - Arguments to update or create a Mentor.
   * @example
   * // Update or create a Mentor
   * const mentor = await prisma.mentor.upsert({
   *   create: {
   *     // ... data to create a Mentor
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Mentor we want to update
   *   }
   * })
   */
  upsert<T extends MentorUpsertArgs>(args: Prisma.SelectSubset<T, MentorUpsertArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Mentors.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorCountArgs} args - Arguments to filter Mentors to count.
   * @example
   * // Count the number of Mentors
   * const count = await prisma.mentor.count({
   *   where: {
   *     // ... the filter for the Mentors we want to count
   *   }
   * })
  **/
  count<T extends MentorCountArgs>(
    args?: Prisma.Subset<T, MentorCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MentorCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Mentor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MentorAggregateArgs>(args: Prisma.Subset<T, MentorAggregateArgs>): Prisma.PrismaPromise<GetMentorAggregateType<T>>

  /**
   * Group by Mentor.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MentorGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MentorGroupByArgs['orderBy'] }
      : { orderBy?: MentorGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MentorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMentorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Mentor model
 */
readonly fields: MentorFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Mentor.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MentorClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  skills<T extends Prisma.Mentor$skillsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Mentor$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorSkillsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  availability<T extends Prisma.Mentor$availabilityArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Mentor$availabilityArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  services<T extends Prisma.Mentor$servicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Mentor$servicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  webinars<T extends Prisma.Mentor$webinarsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Mentor$webinarsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  appointments<T extends Prisma.Mentor$appointmentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Mentor$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Mentor model
 */
export interface MentorFieldRefs {
  readonly id: Prisma.FieldRef<"Mentor", 'String'>
  readonly about: Prisma.FieldRef<"Mentor", 'String'>
  readonly languages: Prisma.FieldRef<"Mentor", 'String[]'>
  readonly timezone: Prisma.FieldRef<"Mentor", 'String'>
  readonly userId: Prisma.FieldRef<"Mentor", 'String'>
  readonly createdAt: Prisma.FieldRef<"Mentor", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Mentor", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Mentor findUnique
 */
export type MentorFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter, which Mentor to fetch.
   */
  where: Prisma.MentorWhereUniqueInput
}

/**
 * Mentor findUniqueOrThrow
 */
export type MentorFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter, which Mentor to fetch.
   */
  where: Prisma.MentorWhereUniqueInput
}

/**
 * Mentor findFirst
 */
export type MentorFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter, which Mentor to fetch.
   */
  where?: Prisma.MentorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Mentors to fetch.
   */
  orderBy?: Prisma.MentorOrderByWithRelationInput | Prisma.MentorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Mentors.
   */
  cursor?: Prisma.MentorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Mentors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Mentors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Mentors.
   */
  distinct?: Prisma.MentorScalarFieldEnum | Prisma.MentorScalarFieldEnum[]
}

/**
 * Mentor findFirstOrThrow
 */
export type MentorFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter, which Mentor to fetch.
   */
  where?: Prisma.MentorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Mentors to fetch.
   */
  orderBy?: Prisma.MentorOrderByWithRelationInput | Prisma.MentorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Mentors.
   */
  cursor?: Prisma.MentorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Mentors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Mentors.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Mentors.
   */
  distinct?: Prisma.MentorScalarFieldEnum | Prisma.MentorScalarFieldEnum[]
}

/**
 * Mentor findMany
 */
export type MentorFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter, which Mentors to fetch.
   */
  where?: Prisma.MentorWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Mentors to fetch.
   */
  orderBy?: Prisma.MentorOrderByWithRelationInput | Prisma.MentorOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Mentors.
   */
  cursor?: Prisma.MentorWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Mentors from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Mentors.
   */
  skip?: number
  distinct?: Prisma.MentorScalarFieldEnum | Prisma.MentorScalarFieldEnum[]
}

/**
 * Mentor create
 */
export type MentorCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * The data needed to create a Mentor.
   */
  data: Prisma.XOR<Prisma.MentorCreateInput, Prisma.MentorUncheckedCreateInput>
}

/**
 * Mentor createMany
 */
export type MentorCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Mentors.
   */
  data: Prisma.MentorCreateManyInput | Prisma.MentorCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Mentor createManyAndReturn
 */
export type MentorCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * The data used to create many Mentors.
   */
  data: Prisma.MentorCreateManyInput | Prisma.MentorCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Mentor update
 */
export type MentorUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * The data needed to update a Mentor.
   */
  data: Prisma.XOR<Prisma.MentorUpdateInput, Prisma.MentorUncheckedUpdateInput>
  /**
   * Choose, which Mentor to update.
   */
  where: Prisma.MentorWhereUniqueInput
}

/**
 * Mentor updateMany
 */
export type MentorUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Mentors.
   */
  data: Prisma.XOR<Prisma.MentorUpdateManyMutationInput, Prisma.MentorUncheckedUpdateManyInput>
  /**
   * Filter which Mentors to update
   */
  where?: Prisma.MentorWhereInput
  /**
   * Limit how many Mentors to update.
   */
  limit?: number
}

/**
 * Mentor updateManyAndReturn
 */
export type MentorUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * The data used to update Mentors.
   */
  data: Prisma.XOR<Prisma.MentorUpdateManyMutationInput, Prisma.MentorUncheckedUpdateManyInput>
  /**
   * Filter which Mentors to update
   */
  where?: Prisma.MentorWhereInput
  /**
   * Limit how many Mentors to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Mentor upsert
 */
export type MentorUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * The filter to search for the Mentor to update in case it exists.
   */
  where: Prisma.MentorWhereUniqueInput
  /**
   * In case the Mentor found by the `where` argument doesn't exist, create a new Mentor with this data.
   */
  create: Prisma.XOR<Prisma.MentorCreateInput, Prisma.MentorUncheckedCreateInput>
  /**
   * In case the Mentor was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MentorUpdateInput, Prisma.MentorUncheckedUpdateInput>
}

/**
 * Mentor delete
 */
export type MentorDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
  /**
   * Filter which Mentor to delete.
   */
  where: Prisma.MentorWhereUniqueInput
}

/**
 * Mentor deleteMany
 */
export type MentorDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Mentors to delete
   */
  where?: Prisma.MentorWhereInput
  /**
   * Limit how many Mentors to delete.
   */
  limit?: number
}

/**
 * Mentor.skills
 */
export type Mentor$skillsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorSkills
   */
  select?: Prisma.MentorSkillsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorSkills
   */
  omit?: Prisma.MentorSkillsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorSkillsInclude<ExtArgs> | null
  where?: Prisma.MentorSkillsWhereInput
  orderBy?: Prisma.MentorSkillsOrderByWithRelationInput | Prisma.MentorSkillsOrderByWithRelationInput[]
  cursor?: Prisma.MentorSkillsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MentorSkillsScalarFieldEnum | Prisma.MentorSkillsScalarFieldEnum[]
}

/**
 * Mentor.availability
 */
export type Mentor$availabilityArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  where?: Prisma.MentorAvailabilityWhereInput
  orderBy?: Prisma.MentorAvailabilityOrderByWithRelationInput | Prisma.MentorAvailabilityOrderByWithRelationInput[]
  cursor?: Prisma.MentorAvailabilityWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MentorAvailabilityScalarFieldEnum | Prisma.MentorAvailabilityScalarFieldEnum[]
}

/**
 * Mentor.services
 */
export type Mentor$servicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  where?: Prisma.MentorServicesWhereInput
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  cursor?: Prisma.MentorServicesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MentorServicesScalarFieldEnum | Prisma.MentorServicesScalarFieldEnum[]
}

/**
 * Mentor.webinars
 */
export type Mentor$webinarsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Webinar
   */
  select?: Prisma.WebinarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Webinar
   */
  omit?: Prisma.WebinarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WebinarInclude<ExtArgs> | null
  where?: Prisma.WebinarWhereInput
  orderBy?: Prisma.WebinarOrderByWithRelationInput | Prisma.WebinarOrderByWithRelationInput[]
  cursor?: Prisma.WebinarWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WebinarScalarFieldEnum | Prisma.WebinarScalarFieldEnum[]
}

/**
 * Mentor.appointments
 */
export type Mentor$appointmentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Appointment
   */
  select?: Prisma.AppointmentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Appointment
   */
  omit?: Prisma.AppointmentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AppointmentInclude<ExtArgs> | null
  where?: Prisma.AppointmentWhereInput
  orderBy?: Prisma.AppointmentOrderByWithRelationInput | Prisma.AppointmentOrderByWithRelationInput[]
  cursor?: Prisma.AppointmentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.AppointmentScalarFieldEnum | Prisma.AppointmentScalarFieldEnum[]
}

/**
 * Mentor without action
 */
export type MentorDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Mentor
   */
  select?: Prisma.MentorSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Mentor
   */
  omit?: Prisma.MentorOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorInclude<ExtArgs> | null
}
