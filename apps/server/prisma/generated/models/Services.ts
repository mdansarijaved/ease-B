
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Services` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Services
 * 
 */
export type ServicesModel = runtime.Types.Result.DefaultSelection<Prisma.$ServicesPayload>

export type AggregateServices = {
  _count: ServicesCountAggregateOutputType | null
  _min: ServicesMinAggregateOutputType | null
  _max: ServicesMaxAggregateOutputType | null
}

export type ServicesMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServicesMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ServicesCountAggregateOutputType = {
  id: number
  name: number
  description: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ServicesMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ServicesMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type ServicesCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ServicesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Services to aggregate.
   */
  where?: Prisma.ServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Services to fetch.
   */
  orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Services from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Services.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Services
  **/
  _count?: true | ServicesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ServicesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ServicesMaxAggregateInputType
}

export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
      [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateServices[P]>
    : Prisma.GetScalarType<T[P], AggregateServices[P]>
}




export type ServicesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ServicesWhereInput
  orderBy?: Prisma.ServicesOrderByWithAggregationInput | Prisma.ServicesOrderByWithAggregationInput[]
  by: Prisma.ServicesScalarFieldEnum[] | Prisma.ServicesScalarFieldEnum
  having?: Prisma.ServicesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ServicesCountAggregateInputType | true
  _min?: ServicesMinAggregateInputType
  _max?: ServicesMaxAggregateInputType
}

export type ServicesGroupByOutputType = {
  id: string
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
  _count: ServicesCountAggregateOutputType | null
  _min: ServicesMinAggregateOutputType | null
  _max: ServicesMaxAggregateOutputType | null
}

type GetServicesGroupByPayload<T extends ServicesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ServicesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ServicesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ServicesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ServicesGroupByOutputType[P]>
      }
    >
  > 



export type ServicesWhereInput = {
  AND?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[]
  OR?: Prisma.ServicesWhereInput[]
  NOT?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[]
  id?: Prisma.StringFilter<"Services"> | string
  name?: Prisma.StringFilter<"Services"> | string
  description?: Prisma.StringFilter<"Services"> | string
  createdAt?: Prisma.DateTimeFilter<"Services"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Services"> | Date | string
  mentorServices?: Prisma.MentorServicesListRelationFilter
}

export type ServicesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mentorServices?: Prisma.MentorServicesOrderByRelationAggregateInput
}

export type ServicesWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[]
  OR?: Prisma.ServicesWhereInput[]
  NOT?: Prisma.ServicesWhereInput | Prisma.ServicesWhereInput[]
  description?: Prisma.StringFilter<"Services"> | string
  createdAt?: Prisma.DateTimeFilter<"Services"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Services"> | Date | string
  mentorServices?: Prisma.MentorServicesListRelationFilter
}, "id" | "name">

export type ServicesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ServicesCountOrderByAggregateInput
  _max?: Prisma.ServicesMaxOrderByAggregateInput
  _min?: Prisma.ServicesMinOrderByAggregateInput
}

export type ServicesScalarWhereWithAggregatesInput = {
  AND?: Prisma.ServicesScalarWhereWithAggregatesInput | Prisma.ServicesScalarWhereWithAggregatesInput[]
  OR?: Prisma.ServicesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ServicesScalarWhereWithAggregatesInput | Prisma.ServicesScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Services"> | string
  name?: Prisma.StringWithAggregatesFilter<"Services"> | string
  description?: Prisma.StringWithAggregatesFilter<"Services"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Services"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Services"> | Date | string
}

export type ServicesCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mentorServices?: Prisma.MentorServicesCreateNestedManyWithoutServiceInput
}

export type ServicesUncheckedCreateInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
  mentorServices?: Prisma.MentorServicesUncheckedCreateNestedManyWithoutServiceInput
}

export type ServicesUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentorServices?: Prisma.MentorServicesUpdateManyWithoutServiceNestedInput
}

export type ServicesUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentorServices?: Prisma.MentorServicesUncheckedUpdateManyWithoutServiceNestedInput
}

export type ServicesCreateManyInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicesUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicesUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ServicesScalarRelationFilter = {
  is?: Prisma.ServicesWhereInput
  isNot?: Prisma.ServicesWhereInput
}

export type ServicesCreateNestedOneWithoutMentorServicesInput = {
  create?: Prisma.XOR<Prisma.ServicesCreateWithoutMentorServicesInput, Prisma.ServicesUncheckedCreateWithoutMentorServicesInput>
  connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutMentorServicesInput
  connect?: Prisma.ServicesWhereUniqueInput
}

export type ServicesUpdateOneRequiredWithoutMentorServicesNestedInput = {
  create?: Prisma.XOR<Prisma.ServicesCreateWithoutMentorServicesInput, Prisma.ServicesUncheckedCreateWithoutMentorServicesInput>
  connectOrCreate?: Prisma.ServicesCreateOrConnectWithoutMentorServicesInput
  upsert?: Prisma.ServicesUpsertWithoutMentorServicesInput
  connect?: Prisma.ServicesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ServicesUpdateToOneWithWhereWithoutMentorServicesInput, Prisma.ServicesUpdateWithoutMentorServicesInput>, Prisma.ServicesUncheckedUpdateWithoutMentorServicesInput>
}

export type ServicesCreateWithoutMentorServicesInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicesUncheckedCreateWithoutMentorServicesInput = {
  id?: string
  name: string
  description: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ServicesCreateOrConnectWithoutMentorServicesInput = {
  where: Prisma.ServicesWhereUniqueInput
  create: Prisma.XOR<Prisma.ServicesCreateWithoutMentorServicesInput, Prisma.ServicesUncheckedCreateWithoutMentorServicesInput>
}

export type ServicesUpsertWithoutMentorServicesInput = {
  update: Prisma.XOR<Prisma.ServicesUpdateWithoutMentorServicesInput, Prisma.ServicesUncheckedUpdateWithoutMentorServicesInput>
  create: Prisma.XOR<Prisma.ServicesCreateWithoutMentorServicesInput, Prisma.ServicesUncheckedCreateWithoutMentorServicesInput>
  where?: Prisma.ServicesWhereInput
}

export type ServicesUpdateToOneWithWhereWithoutMentorServicesInput = {
  where?: Prisma.ServicesWhereInput
  data: Prisma.XOR<Prisma.ServicesUpdateWithoutMentorServicesInput, Prisma.ServicesUncheckedUpdateWithoutMentorServicesInput>
}

export type ServicesUpdateWithoutMentorServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ServicesUncheckedUpdateWithoutMentorServicesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ServicesCountOutputType
 */

export type ServicesCountOutputType = {
  mentorServices: number
}

export type ServicesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentorServices?: boolean | ServicesCountOutputTypeCountMentorServicesArgs
}

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ServicesCountOutputType
   */
  select?: Prisma.ServicesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ServicesCountOutputType without action
 */
export type ServicesCountOutputTypeCountMentorServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorServicesWhereInput
}


export type ServicesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentorServices?: boolean | Prisma.Services$mentorServicesArgs<ExtArgs>
  _count?: boolean | Prisma.ServicesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["services"]>

export type ServicesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["services"]>

export type ServicesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["services"]>

export type ServicesSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ServicesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["services"]>
export type ServicesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentorServices?: boolean | Prisma.Services$mentorServicesArgs<ExtArgs>
  _count?: boolean | Prisma.ServicesCountOutputTypeDefaultArgs<ExtArgs>
}
export type ServicesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ServicesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ServicesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Services"
  objects: {
    mentorServices: Prisma.$MentorServicesPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["services"]>
  composites: {}
}

export type ServicesGetPayload<S extends boolean | null | undefined | ServicesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ServicesPayload, S>

export type ServicesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ServicesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ServicesCountAggregateInputType | true
  }

export interface ServicesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Services'], meta: { name: 'Services' } }
  /**
   * Find zero or one Services that matches the filter.
   * @param {ServicesFindUniqueArgs} args - Arguments to find a Services
   * @example
   * // Get one Services
   * const services = await prisma.services.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ServicesFindUniqueArgs>(args: Prisma.SelectSubset<T, ServicesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Services that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ServicesFindUniqueOrThrowArgs} args - Arguments to find a Services
   * @example
   * // Get one Services
   * const services = await prisma.services.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ServicesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ServicesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Services that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesFindFirstArgs} args - Arguments to find a Services
   * @example
   * // Get one Services
   * const services = await prisma.services.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ServicesFindFirstArgs>(args?: Prisma.SelectSubset<T, ServicesFindFirstArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Services that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesFindFirstOrThrowArgs} args - Arguments to find a Services
   * @example
   * // Get one Services
   * const services = await prisma.services.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ServicesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ServicesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Services that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Services
   * const services = await prisma.services.findMany()
   * 
   * // Get first 10 Services
   * const services = await prisma.services.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ServicesFindManyArgs>(args?: Prisma.SelectSubset<T, ServicesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Services.
   * @param {ServicesCreateArgs} args - Arguments to create a Services.
   * @example
   * // Create one Services
   * const Services = await prisma.services.create({
   *   data: {
   *     // ... data to create a Services
   *   }
   * })
   * 
   */
  create<T extends ServicesCreateArgs>(args: Prisma.SelectSubset<T, ServicesCreateArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Services.
   * @param {ServicesCreateManyArgs} args - Arguments to create many Services.
   * @example
   * // Create many Services
   * const services = await prisma.services.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ServicesCreateManyArgs>(args?: Prisma.SelectSubset<T, ServicesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Services and returns the data saved in the database.
   * @param {ServicesCreateManyAndReturnArgs} args - Arguments to create many Services.
   * @example
   * // Create many Services
   * const services = await prisma.services.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Services and only return the `id`
   * const servicesWithIdOnly = await prisma.services.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ServicesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ServicesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Services.
   * @param {ServicesDeleteArgs} args - Arguments to delete one Services.
   * @example
   * // Delete one Services
   * const Services = await prisma.services.delete({
   *   where: {
   *     // ... filter to delete one Services
   *   }
   * })
   * 
   */
  delete<T extends ServicesDeleteArgs>(args: Prisma.SelectSubset<T, ServicesDeleteArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Services.
   * @param {ServicesUpdateArgs} args - Arguments to update one Services.
   * @example
   * // Update one Services
   * const services = await prisma.services.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ServicesUpdateArgs>(args: Prisma.SelectSubset<T, ServicesUpdateArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Services.
   * @param {ServicesDeleteManyArgs} args - Arguments to filter Services to delete.
   * @example
   * // Delete a few Services
   * const { count } = await prisma.services.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ServicesDeleteManyArgs>(args?: Prisma.SelectSubset<T, ServicesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Services.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Services
   * const services = await prisma.services.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ServicesUpdateManyArgs>(args: Prisma.SelectSubset<T, ServicesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Services and returns the data updated in the database.
   * @param {ServicesUpdateManyAndReturnArgs} args - Arguments to update many Services.
   * @example
   * // Update many Services
   * const services = await prisma.services.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Services and only return the `id`
   * const servicesWithIdOnly = await prisma.services.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ServicesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ServicesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Services.
   * @param {ServicesUpsertArgs} args - Arguments to update or create a Services.
   * @example
   * // Update or create a Services
   * const services = await prisma.services.upsert({
   *   create: {
   *     // ... data to create a Services
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Services we want to update
   *   }
   * })
   */
  upsert<T extends ServicesUpsertArgs>(args: Prisma.SelectSubset<T, ServicesUpsertArgs<ExtArgs>>): Prisma.Prisma__ServicesClient<runtime.Types.Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Services.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesCountArgs} args - Arguments to filter Services to count.
   * @example
   * // Count the number of Services
   * const count = await prisma.services.count({
   *   where: {
   *     // ... the filter for the Services we want to count
   *   }
   * })
  **/
  count<T extends ServicesCountArgs>(
    args?: Prisma.Subset<T, ServicesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ServicesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Services.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ServicesAggregateArgs>(args: Prisma.Subset<T, ServicesAggregateArgs>): Prisma.PrismaPromise<GetServicesAggregateType<T>>

  /**
   * Group by Services.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ServicesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ServicesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ServicesGroupByArgs['orderBy'] }
      : { orderBy?: ServicesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ServicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Services model
 */
readonly fields: ServicesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Services.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ServicesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mentorServices<T extends Prisma.Services$mentorServicesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Services$mentorServicesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorServicesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Services model
 */
export interface ServicesFieldRefs {
  readonly id: Prisma.FieldRef<"Services", 'String'>
  readonly name: Prisma.FieldRef<"Services", 'String'>
  readonly description: Prisma.FieldRef<"Services", 'String'>
  readonly createdAt: Prisma.FieldRef<"Services", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Services", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Services findUnique
 */
export type ServicesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter, which Services to fetch.
   */
  where: Prisma.ServicesWhereUniqueInput
}

/**
 * Services findUniqueOrThrow
 */
export type ServicesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter, which Services to fetch.
   */
  where: Prisma.ServicesWhereUniqueInput
}

/**
 * Services findFirst
 */
export type ServicesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter, which Services to fetch.
   */
  where?: Prisma.ServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Services to fetch.
   */
  orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Services.
   */
  cursor?: Prisma.ServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Services from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Services.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Services.
   */
  distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[]
}

/**
 * Services findFirstOrThrow
 */
export type ServicesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter, which Services to fetch.
   */
  where?: Prisma.ServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Services to fetch.
   */
  orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Services.
   */
  cursor?: Prisma.ServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Services from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Services.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Services.
   */
  distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[]
}

/**
 * Services findMany
 */
export type ServicesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter, which Services to fetch.
   */
  where?: Prisma.ServicesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Services to fetch.
   */
  orderBy?: Prisma.ServicesOrderByWithRelationInput | Prisma.ServicesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Services.
   */
  cursor?: Prisma.ServicesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Services from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Services.
   */
  skip?: number
  distinct?: Prisma.ServicesScalarFieldEnum | Prisma.ServicesScalarFieldEnum[]
}

/**
 * Services create
 */
export type ServicesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * The data needed to create a Services.
   */
  data: Prisma.XOR<Prisma.ServicesCreateInput, Prisma.ServicesUncheckedCreateInput>
}

/**
 * Services createMany
 */
export type ServicesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Services.
   */
  data: Prisma.ServicesCreateManyInput | Prisma.ServicesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Services createManyAndReturn
 */
export type ServicesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * The data used to create many Services.
   */
  data: Prisma.ServicesCreateManyInput | Prisma.ServicesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Services update
 */
export type ServicesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * The data needed to update a Services.
   */
  data: Prisma.XOR<Prisma.ServicesUpdateInput, Prisma.ServicesUncheckedUpdateInput>
  /**
   * Choose, which Services to update.
   */
  where: Prisma.ServicesWhereUniqueInput
}

/**
 * Services updateMany
 */
export type ServicesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Services.
   */
  data: Prisma.XOR<Prisma.ServicesUpdateManyMutationInput, Prisma.ServicesUncheckedUpdateManyInput>
  /**
   * Filter which Services to update
   */
  where?: Prisma.ServicesWhereInput
  /**
   * Limit how many Services to update.
   */
  limit?: number
}

/**
 * Services updateManyAndReturn
 */
export type ServicesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * The data used to update Services.
   */
  data: Prisma.XOR<Prisma.ServicesUpdateManyMutationInput, Prisma.ServicesUncheckedUpdateManyInput>
  /**
   * Filter which Services to update
   */
  where?: Prisma.ServicesWhereInput
  /**
   * Limit how many Services to update.
   */
  limit?: number
}

/**
 * Services upsert
 */
export type ServicesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * The filter to search for the Services to update in case it exists.
   */
  where: Prisma.ServicesWhereUniqueInput
  /**
   * In case the Services found by the `where` argument doesn't exist, create a new Services with this data.
   */
  create: Prisma.XOR<Prisma.ServicesCreateInput, Prisma.ServicesUncheckedCreateInput>
  /**
   * In case the Services was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ServicesUpdateInput, Prisma.ServicesUncheckedUpdateInput>
}

/**
 * Services delete
 */
export type ServicesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
  /**
   * Filter which Services to delete.
   */
  where: Prisma.ServicesWhereUniqueInput
}

/**
 * Services deleteMany
 */
export type ServicesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Services to delete
   */
  where?: Prisma.ServicesWhereInput
  /**
   * Limit how many Services to delete.
   */
  limit?: number
}

/**
 * Services.mentorServices
 */
export type Services$mentorServicesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorServices
   */
  select?: Prisma.MentorServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorServices
   */
  omit?: Prisma.MentorServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorServicesInclude<ExtArgs> | null
  where?: Prisma.MentorServicesWhereInput
  orderBy?: Prisma.MentorServicesOrderByWithRelationInput | Prisma.MentorServicesOrderByWithRelationInput[]
  cursor?: Prisma.MentorServicesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MentorServicesScalarFieldEnum | Prisma.MentorServicesScalarFieldEnum[]
}

/**
 * Services without action
 */
export type ServicesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Services
   */
  select?: Prisma.ServicesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Services
   */
  omit?: Prisma.ServicesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ServicesInclude<ExtArgs> | null
}
