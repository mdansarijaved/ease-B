
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `MentorAvailability` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MentorAvailability
 * 
 */
export type MentorAvailabilityModel = runtime.Types.Result.DefaultSelection<Prisma.$MentorAvailabilityPayload>

export type AggregateMentorAvailability = {
  _count: MentorAvailabilityCountAggregateOutputType | null
  _min: MentorAvailabilityMinAggregateOutputType | null
  _max: MentorAvailabilityMaxAggregateOutputType | null
}

export type MentorAvailabilityMinAggregateOutputType = {
  id: string | null
  mentorId: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  startTime: string | null
  endTime: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorAvailabilityMaxAggregateOutputType = {
  id: string | null
  mentorId: string | null
  dayOfWeek: $Enums.DayOfWeek | null
  startTime: string | null
  endTime: string | null
  isActive: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type MentorAvailabilityCountAggregateOutputType = {
  id: number
  mentorId: number
  dayOfWeek: number
  startTime: number
  endTime: number
  isActive: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type MentorAvailabilityMinAggregateInputType = {
  id?: true
  mentorId?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorAvailabilityMaxAggregateInputType = {
  id?: true
  mentorId?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
}

export type MentorAvailabilityCountAggregateInputType = {
  id?: true
  mentorId?: true
  dayOfWeek?: true
  startTime?: true
  endTime?: true
  isActive?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type MentorAvailabilityAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MentorAvailability to aggregate.
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorAvailabilities to fetch.
   */
  orderBy?: Prisma.MentorAvailabilityOrderByWithRelationInput | Prisma.MentorAvailabilityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MentorAvailabilityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorAvailabilities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorAvailabilities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MentorAvailabilities
  **/
  _count?: true | MentorAvailabilityCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MentorAvailabilityMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MentorAvailabilityMaxAggregateInputType
}

export type GetMentorAvailabilityAggregateType<T extends MentorAvailabilityAggregateArgs> = {
      [P in keyof T & keyof AggregateMentorAvailability]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMentorAvailability[P]>
    : Prisma.GetScalarType<T[P], AggregateMentorAvailability[P]>
}




export type MentorAvailabilityGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MentorAvailabilityWhereInput
  orderBy?: Prisma.MentorAvailabilityOrderByWithAggregationInput | Prisma.MentorAvailabilityOrderByWithAggregationInput[]
  by: Prisma.MentorAvailabilityScalarFieldEnum[] | Prisma.MentorAvailabilityScalarFieldEnum
  having?: Prisma.MentorAvailabilityScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MentorAvailabilityCountAggregateInputType | true
  _min?: MentorAvailabilityMinAggregateInputType
  _max?: MentorAvailabilityMaxAggregateInputType
}

export type MentorAvailabilityGroupByOutputType = {
  id: string
  mentorId: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive: boolean
  createdAt: Date
  updatedAt: Date
  _count: MentorAvailabilityCountAggregateOutputType | null
  _min: MentorAvailabilityMinAggregateOutputType | null
  _max: MentorAvailabilityMaxAggregateOutputType | null
}

type GetMentorAvailabilityGroupByPayload<T extends MentorAvailabilityGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MentorAvailabilityGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MentorAvailabilityGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MentorAvailabilityGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MentorAvailabilityGroupByOutputType[P]>
      }
    >
  > 



export type MentorAvailabilityWhereInput = {
  AND?: Prisma.MentorAvailabilityWhereInput | Prisma.MentorAvailabilityWhereInput[]
  OR?: Prisma.MentorAvailabilityWhereInput[]
  NOT?: Prisma.MentorAvailabilityWhereInput | Prisma.MentorAvailabilityWhereInput[]
  id?: Prisma.StringFilter<"MentorAvailability"> | string
  mentorId?: Prisma.StringFilter<"MentorAvailability"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"MentorAvailability"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"MentorAvailability"> | string
  endTime?: Prisma.StringFilter<"MentorAvailability"> | string
  isActive?: Prisma.BoolFilter<"MentorAvailability"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
  mentor?: Prisma.XOR<Prisma.MentorScalarRelationFilter, Prisma.MentorWhereInput>
}

export type MentorAvailabilityOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  mentor?: Prisma.MentorOrderByWithRelationInput
}

export type MentorAvailabilityWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  mentorId_dayOfWeek_startTime_endTime?: Prisma.MentorAvailabilityMentorIdDayOfWeekStartTimeEndTimeCompoundUniqueInput
  AND?: Prisma.MentorAvailabilityWhereInput | Prisma.MentorAvailabilityWhereInput[]
  OR?: Prisma.MentorAvailabilityWhereInput[]
  NOT?: Prisma.MentorAvailabilityWhereInput | Prisma.MentorAvailabilityWhereInput[]
  mentorId?: Prisma.StringFilter<"MentorAvailability"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"MentorAvailability"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"MentorAvailability"> | string
  endTime?: Prisma.StringFilter<"MentorAvailability"> | string
  isActive?: Prisma.BoolFilter<"MentorAvailability"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
  mentor?: Prisma.XOR<Prisma.MentorScalarRelationFilter, Prisma.MentorWhereInput>
}, "id" | "mentorId_dayOfWeek_startTime_endTime">

export type MentorAvailabilityOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.MentorAvailabilityCountOrderByAggregateInput
  _max?: Prisma.MentorAvailabilityMaxOrderByAggregateInput
  _min?: Prisma.MentorAvailabilityMinOrderByAggregateInput
}

export type MentorAvailabilityScalarWhereWithAggregatesInput = {
  AND?: Prisma.MentorAvailabilityScalarWhereWithAggregatesInput | Prisma.MentorAvailabilityScalarWhereWithAggregatesInput[]
  OR?: Prisma.MentorAvailabilityScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MentorAvailabilityScalarWhereWithAggregatesInput | Prisma.MentorAvailabilityScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MentorAvailability"> | string
  mentorId?: Prisma.StringWithAggregatesFilter<"MentorAvailability"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekWithAggregatesFilter<"MentorAvailability"> | $Enums.DayOfWeek
  startTime?: Prisma.StringWithAggregatesFilter<"MentorAvailability"> | string
  endTime?: Prisma.StringWithAggregatesFilter<"MentorAvailability"> | string
  isActive?: Prisma.BoolWithAggregatesFilter<"MentorAvailability"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"MentorAvailability"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"MentorAvailability"> | Date | string
}

export type MentorAvailabilityCreateInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
  mentor: Prisma.MentorCreateNestedOneWithoutAvailabilityInput
}

export type MentorAvailabilityUncheckedCreateInput = {
  id?: string
  mentorId: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorAvailabilityUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  mentor?: Prisma.MentorUpdateOneRequiredWithoutAvailabilityNestedInput
}

export type MentorAvailabilityUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorAvailabilityCreateManyInput = {
  id?: string
  mentorId: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorAvailabilityUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorAvailabilityUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  mentorId?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorAvailabilityListRelationFilter = {
  every?: Prisma.MentorAvailabilityWhereInput
  some?: Prisma.MentorAvailabilityWhereInput
  none?: Prisma.MentorAvailabilityWhereInput
}

export type MentorAvailabilityOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MentorAvailabilityMentorIdDayOfWeekStartTimeEndTimeCompoundUniqueInput = {
  mentorId: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
}

export type MentorAvailabilityCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorAvailabilityMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorAvailabilityMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  mentorId?: Prisma.SortOrder
  dayOfWeek?: Prisma.SortOrder
  startTime?: Prisma.SortOrder
  endTime?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type MentorAvailabilityCreateNestedManyWithoutMentorInput = {
  create?: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput> | Prisma.MentorAvailabilityCreateWithoutMentorInput[] | Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput | Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput[]
  createMany?: Prisma.MentorAvailabilityCreateManyMentorInputEnvelope
  connect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
}

export type MentorAvailabilityUncheckedCreateNestedManyWithoutMentorInput = {
  create?: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput> | Prisma.MentorAvailabilityCreateWithoutMentorInput[] | Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput | Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput[]
  createMany?: Prisma.MentorAvailabilityCreateManyMentorInputEnvelope
  connect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
}

export type MentorAvailabilityUpdateManyWithoutMentorNestedInput = {
  create?: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput> | Prisma.MentorAvailabilityCreateWithoutMentorInput[] | Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput | Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput[]
  upsert?: Prisma.MentorAvailabilityUpsertWithWhereUniqueWithoutMentorInput | Prisma.MentorAvailabilityUpsertWithWhereUniqueWithoutMentorInput[]
  createMany?: Prisma.MentorAvailabilityCreateManyMentorInputEnvelope
  set?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  disconnect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  delete?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  connect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  update?: Prisma.MentorAvailabilityUpdateWithWhereUniqueWithoutMentorInput | Prisma.MentorAvailabilityUpdateWithWhereUniqueWithoutMentorInput[]
  updateMany?: Prisma.MentorAvailabilityUpdateManyWithWhereWithoutMentorInput | Prisma.MentorAvailabilityUpdateManyWithWhereWithoutMentorInput[]
  deleteMany?: Prisma.MentorAvailabilityScalarWhereInput | Prisma.MentorAvailabilityScalarWhereInput[]
}

export type MentorAvailabilityUncheckedUpdateManyWithoutMentorNestedInput = {
  create?: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput> | Prisma.MentorAvailabilityCreateWithoutMentorInput[] | Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput[]
  connectOrCreate?: Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput | Prisma.MentorAvailabilityCreateOrConnectWithoutMentorInput[]
  upsert?: Prisma.MentorAvailabilityUpsertWithWhereUniqueWithoutMentorInput | Prisma.MentorAvailabilityUpsertWithWhereUniqueWithoutMentorInput[]
  createMany?: Prisma.MentorAvailabilityCreateManyMentorInputEnvelope
  set?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  disconnect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  delete?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  connect?: Prisma.MentorAvailabilityWhereUniqueInput | Prisma.MentorAvailabilityWhereUniqueInput[]
  update?: Prisma.MentorAvailabilityUpdateWithWhereUniqueWithoutMentorInput | Prisma.MentorAvailabilityUpdateWithWhereUniqueWithoutMentorInput[]
  updateMany?: Prisma.MentorAvailabilityUpdateManyWithWhereWithoutMentorInput | Prisma.MentorAvailabilityUpdateManyWithWhereWithoutMentorInput[]
  deleteMany?: Prisma.MentorAvailabilityScalarWhereInput | Prisma.MentorAvailabilityScalarWhereInput[]
}

export type EnumDayOfWeekFieldUpdateOperationsInput = {
  set?: $Enums.DayOfWeek
}

export type MentorAvailabilityCreateWithoutMentorInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorAvailabilityUncheckedCreateWithoutMentorInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorAvailabilityCreateOrConnectWithoutMentorInput = {
  where: Prisma.MentorAvailabilityWhereUniqueInput
  create: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput>
}

export type MentorAvailabilityCreateManyMentorInputEnvelope = {
  data: Prisma.MentorAvailabilityCreateManyMentorInput | Prisma.MentorAvailabilityCreateManyMentorInput[]
  skipDuplicates?: boolean
}

export type MentorAvailabilityUpsertWithWhereUniqueWithoutMentorInput = {
  where: Prisma.MentorAvailabilityWhereUniqueInput
  update: Prisma.XOR<Prisma.MentorAvailabilityUpdateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedUpdateWithoutMentorInput>
  create: Prisma.XOR<Prisma.MentorAvailabilityCreateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedCreateWithoutMentorInput>
}

export type MentorAvailabilityUpdateWithWhereUniqueWithoutMentorInput = {
  where: Prisma.MentorAvailabilityWhereUniqueInput
  data: Prisma.XOR<Prisma.MentorAvailabilityUpdateWithoutMentorInput, Prisma.MentorAvailabilityUncheckedUpdateWithoutMentorInput>
}

export type MentorAvailabilityUpdateManyWithWhereWithoutMentorInput = {
  where: Prisma.MentorAvailabilityScalarWhereInput
  data: Prisma.XOR<Prisma.MentorAvailabilityUpdateManyMutationInput, Prisma.MentorAvailabilityUncheckedUpdateManyWithoutMentorInput>
}

export type MentorAvailabilityScalarWhereInput = {
  AND?: Prisma.MentorAvailabilityScalarWhereInput | Prisma.MentorAvailabilityScalarWhereInput[]
  OR?: Prisma.MentorAvailabilityScalarWhereInput[]
  NOT?: Prisma.MentorAvailabilityScalarWhereInput | Prisma.MentorAvailabilityScalarWhereInput[]
  id?: Prisma.StringFilter<"MentorAvailability"> | string
  mentorId?: Prisma.StringFilter<"MentorAvailability"> | string
  dayOfWeek?: Prisma.EnumDayOfWeekFilter<"MentorAvailability"> | $Enums.DayOfWeek
  startTime?: Prisma.StringFilter<"MentorAvailability"> | string
  endTime?: Prisma.StringFilter<"MentorAvailability"> | string
  isActive?: Prisma.BoolFilter<"MentorAvailability"> | boolean
  createdAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"MentorAvailability"> | Date | string
}

export type MentorAvailabilityCreateManyMentorInput = {
  id?: string
  dayOfWeek: $Enums.DayOfWeek
  startTime: string
  endTime: string
  isActive?: boolean
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type MentorAvailabilityUpdateWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorAvailabilityUncheckedUpdateWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MentorAvailabilityUncheckedUpdateManyWithoutMentorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  dayOfWeek?: Prisma.EnumDayOfWeekFieldUpdateOperationsInput | $Enums.DayOfWeek
  startTime?: Prisma.StringFieldUpdateOperationsInput | string
  endTime?: Prisma.StringFieldUpdateOperationsInput | string
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MentorAvailabilitySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorAvailability"]>

export type MentorAvailabilitySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorAvailability"]>

export type MentorAvailabilitySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  mentorId?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}, ExtArgs["result"]["mentorAvailability"]>

export type MentorAvailabilitySelectScalar = {
  id?: boolean
  mentorId?: boolean
  dayOfWeek?: boolean
  startTime?: boolean
  endTime?: boolean
  isActive?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type MentorAvailabilityOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "mentorId" | "dayOfWeek" | "startTime" | "endTime" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["mentorAvailability"]>
export type MentorAvailabilityInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}
export type MentorAvailabilityIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}
export type MentorAvailabilityIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  mentor?: boolean | Prisma.MentorDefaultArgs<ExtArgs>
}

export type $MentorAvailabilityPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MentorAvailability"
  objects: {
    mentor: Prisma.$MentorPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    mentorId: string
    dayOfWeek: $Enums.DayOfWeek
    startTime: string
    endTime: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["mentorAvailability"]>
  composites: {}
}

export type MentorAvailabilityGetPayload<S extends boolean | null | undefined | MentorAvailabilityDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload, S>

export type MentorAvailabilityCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MentorAvailabilityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MentorAvailabilityCountAggregateInputType | true
  }

export interface MentorAvailabilityDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MentorAvailability'], meta: { name: 'MentorAvailability' } }
  /**
   * Find zero or one MentorAvailability that matches the filter.
   * @param {MentorAvailabilityFindUniqueArgs} args - Arguments to find a MentorAvailability
   * @example
   * // Get one MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MentorAvailabilityFindUniqueArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MentorAvailability that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MentorAvailabilityFindUniqueOrThrowArgs} args - Arguments to find a MentorAvailability
   * @example
   * // Get one MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MentorAvailabilityFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MentorAvailability that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityFindFirstArgs} args - Arguments to find a MentorAvailability
   * @example
   * // Get one MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MentorAvailabilityFindFirstArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityFindFirstArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MentorAvailability that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityFindFirstOrThrowArgs} args - Arguments to find a MentorAvailability
   * @example
   * // Get one MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MentorAvailabilityFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MentorAvailabilities that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MentorAvailabilities
   * const mentorAvailabilities = await prisma.mentorAvailability.findMany()
   * 
   * // Get first 10 MentorAvailabilities
   * const mentorAvailabilities = await prisma.mentorAvailability.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const mentorAvailabilityWithIdOnly = await prisma.mentorAvailability.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MentorAvailabilityFindManyArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MentorAvailability.
   * @param {MentorAvailabilityCreateArgs} args - Arguments to create a MentorAvailability.
   * @example
   * // Create one MentorAvailability
   * const MentorAvailability = await prisma.mentorAvailability.create({
   *   data: {
   *     // ... data to create a MentorAvailability
   *   }
   * })
   * 
   */
  create<T extends MentorAvailabilityCreateArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityCreateArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MentorAvailabilities.
   * @param {MentorAvailabilityCreateManyArgs} args - Arguments to create many MentorAvailabilities.
   * @example
   * // Create many MentorAvailabilities
   * const mentorAvailability = await prisma.mentorAvailability.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MentorAvailabilityCreateManyArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many MentorAvailabilities and returns the data saved in the database.
   * @param {MentorAvailabilityCreateManyAndReturnArgs} args - Arguments to create many MentorAvailabilities.
   * @example
   * // Create many MentorAvailabilities
   * const mentorAvailability = await prisma.mentorAvailability.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many MentorAvailabilities and only return the `id`
   * const mentorAvailabilityWithIdOnly = await prisma.mentorAvailability.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends MentorAvailabilityCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a MentorAvailability.
   * @param {MentorAvailabilityDeleteArgs} args - Arguments to delete one MentorAvailability.
   * @example
   * // Delete one MentorAvailability
   * const MentorAvailability = await prisma.mentorAvailability.delete({
   *   where: {
   *     // ... filter to delete one MentorAvailability
   *   }
   * })
   * 
   */
  delete<T extends MentorAvailabilityDeleteArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityDeleteArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MentorAvailability.
   * @param {MentorAvailabilityUpdateArgs} args - Arguments to update one MentorAvailability.
   * @example
   * // Update one MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MentorAvailabilityUpdateArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityUpdateArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MentorAvailabilities.
   * @param {MentorAvailabilityDeleteManyArgs} args - Arguments to filter MentorAvailabilities to delete.
   * @example
   * // Delete a few MentorAvailabilities
   * const { count } = await prisma.mentorAvailability.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MentorAvailabilityDeleteManyArgs>(args?: Prisma.SelectSubset<T, MentorAvailabilityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MentorAvailabilities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MentorAvailabilities
   * const mentorAvailability = await prisma.mentorAvailability.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MentorAvailabilityUpdateManyArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MentorAvailabilities and returns the data updated in the database.
   * @param {MentorAvailabilityUpdateManyAndReturnArgs} args - Arguments to update many MentorAvailabilities.
   * @example
   * // Update many MentorAvailabilities
   * const mentorAvailability = await prisma.mentorAvailability.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more MentorAvailabilities and only return the `id`
   * const mentorAvailabilityWithIdOnly = await prisma.mentorAvailability.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends MentorAvailabilityUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one MentorAvailability.
   * @param {MentorAvailabilityUpsertArgs} args - Arguments to update or create a MentorAvailability.
   * @example
   * // Update or create a MentorAvailability
   * const mentorAvailability = await prisma.mentorAvailability.upsert({
   *   create: {
   *     // ... data to create a MentorAvailability
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MentorAvailability we want to update
   *   }
   * })
   */
  upsert<T extends MentorAvailabilityUpsertArgs>(args: Prisma.SelectSubset<T, MentorAvailabilityUpsertArgs<ExtArgs>>): Prisma.Prisma__MentorAvailabilityClient<runtime.Types.Result.GetResult<Prisma.$MentorAvailabilityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of MentorAvailabilities.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityCountArgs} args - Arguments to filter MentorAvailabilities to count.
   * @example
   * // Count the number of MentorAvailabilities
   * const count = await prisma.mentorAvailability.count({
   *   where: {
   *     // ... the filter for the MentorAvailabilities we want to count
   *   }
   * })
  **/
  count<T extends MentorAvailabilityCountArgs>(
    args?: Prisma.Subset<T, MentorAvailabilityCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MentorAvailabilityCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MentorAvailability.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MentorAvailabilityAggregateArgs>(args: Prisma.Subset<T, MentorAvailabilityAggregateArgs>): Prisma.PrismaPromise<GetMentorAvailabilityAggregateType<T>>

  /**
   * Group by MentorAvailability.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MentorAvailabilityGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MentorAvailabilityGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MentorAvailabilityGroupByArgs['orderBy'] }
      : { orderBy?: MentorAvailabilityGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MentorAvailabilityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMentorAvailabilityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MentorAvailability model
 */
readonly fields: MentorAvailabilityFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MentorAvailability.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MentorAvailabilityClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  mentor<T extends Prisma.MentorDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MentorDefaultArgs<ExtArgs>>): Prisma.Prisma__MentorClient<runtime.Types.Result.GetResult<Prisma.$MentorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MentorAvailability model
 */
export interface MentorAvailabilityFieldRefs {
  readonly id: Prisma.FieldRef<"MentorAvailability", 'String'>
  readonly mentorId: Prisma.FieldRef<"MentorAvailability", 'String'>
  readonly dayOfWeek: Prisma.FieldRef<"MentorAvailability", 'DayOfWeek'>
  readonly startTime: Prisma.FieldRef<"MentorAvailability", 'String'>
  readonly endTime: Prisma.FieldRef<"MentorAvailability", 'String'>
  readonly isActive: Prisma.FieldRef<"MentorAvailability", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"MentorAvailability", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"MentorAvailability", 'DateTime'>
}
    

// Custom InputTypes
/**
 * MentorAvailability findUnique
 */
export type MentorAvailabilityFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter, which MentorAvailability to fetch.
   */
  where: Prisma.MentorAvailabilityWhereUniqueInput
}

/**
 * MentorAvailability findUniqueOrThrow
 */
export type MentorAvailabilityFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter, which MentorAvailability to fetch.
   */
  where: Prisma.MentorAvailabilityWhereUniqueInput
}

/**
 * MentorAvailability findFirst
 */
export type MentorAvailabilityFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter, which MentorAvailability to fetch.
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorAvailabilities to fetch.
   */
  orderBy?: Prisma.MentorAvailabilityOrderByWithRelationInput | Prisma.MentorAvailabilityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MentorAvailabilities.
   */
  cursor?: Prisma.MentorAvailabilityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorAvailabilities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorAvailabilities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MentorAvailabilities.
   */
  distinct?: Prisma.MentorAvailabilityScalarFieldEnum | Prisma.MentorAvailabilityScalarFieldEnum[]
}

/**
 * MentorAvailability findFirstOrThrow
 */
export type MentorAvailabilityFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter, which MentorAvailability to fetch.
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorAvailabilities to fetch.
   */
  orderBy?: Prisma.MentorAvailabilityOrderByWithRelationInput | Prisma.MentorAvailabilityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MentorAvailabilities.
   */
  cursor?: Prisma.MentorAvailabilityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorAvailabilities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorAvailabilities.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MentorAvailabilities.
   */
  distinct?: Prisma.MentorAvailabilityScalarFieldEnum | Prisma.MentorAvailabilityScalarFieldEnum[]
}

/**
 * MentorAvailability findMany
 */
export type MentorAvailabilityFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter, which MentorAvailabilities to fetch.
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MentorAvailabilities to fetch.
   */
  orderBy?: Prisma.MentorAvailabilityOrderByWithRelationInput | Prisma.MentorAvailabilityOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MentorAvailabilities.
   */
  cursor?: Prisma.MentorAvailabilityWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MentorAvailabilities from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MentorAvailabilities.
   */
  skip?: number
  distinct?: Prisma.MentorAvailabilityScalarFieldEnum | Prisma.MentorAvailabilityScalarFieldEnum[]
}

/**
 * MentorAvailability create
 */
export type MentorAvailabilityCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * The data needed to create a MentorAvailability.
   */
  data: Prisma.XOR<Prisma.MentorAvailabilityCreateInput, Prisma.MentorAvailabilityUncheckedCreateInput>
}

/**
 * MentorAvailability createMany
 */
export type MentorAvailabilityCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MentorAvailabilities.
   */
  data: Prisma.MentorAvailabilityCreateManyInput | Prisma.MentorAvailabilityCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * MentorAvailability createManyAndReturn
 */
export type MentorAvailabilityCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * The data used to create many MentorAvailabilities.
   */
  data: Prisma.MentorAvailabilityCreateManyInput | Prisma.MentorAvailabilityCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * MentorAvailability update
 */
export type MentorAvailabilityUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * The data needed to update a MentorAvailability.
   */
  data: Prisma.XOR<Prisma.MentorAvailabilityUpdateInput, Prisma.MentorAvailabilityUncheckedUpdateInput>
  /**
   * Choose, which MentorAvailability to update.
   */
  where: Prisma.MentorAvailabilityWhereUniqueInput
}

/**
 * MentorAvailability updateMany
 */
export type MentorAvailabilityUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MentorAvailabilities.
   */
  data: Prisma.XOR<Prisma.MentorAvailabilityUpdateManyMutationInput, Prisma.MentorAvailabilityUncheckedUpdateManyInput>
  /**
   * Filter which MentorAvailabilities to update
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * Limit how many MentorAvailabilities to update.
   */
  limit?: number
}

/**
 * MentorAvailability updateManyAndReturn
 */
export type MentorAvailabilityUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * The data used to update MentorAvailabilities.
   */
  data: Prisma.XOR<Prisma.MentorAvailabilityUpdateManyMutationInput, Prisma.MentorAvailabilityUncheckedUpdateManyInput>
  /**
   * Filter which MentorAvailabilities to update
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * Limit how many MentorAvailabilities to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * MentorAvailability upsert
 */
export type MentorAvailabilityUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * The filter to search for the MentorAvailability to update in case it exists.
   */
  where: Prisma.MentorAvailabilityWhereUniqueInput
  /**
   * In case the MentorAvailability found by the `where` argument doesn't exist, create a new MentorAvailability with this data.
   */
  create: Prisma.XOR<Prisma.MentorAvailabilityCreateInput, Prisma.MentorAvailabilityUncheckedCreateInput>
  /**
   * In case the MentorAvailability was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MentorAvailabilityUpdateInput, Prisma.MentorAvailabilityUncheckedUpdateInput>
}

/**
 * MentorAvailability delete
 */
export type MentorAvailabilityDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
  /**
   * Filter which MentorAvailability to delete.
   */
  where: Prisma.MentorAvailabilityWhereUniqueInput
}

/**
 * MentorAvailability deleteMany
 */
export type MentorAvailabilityDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MentorAvailabilities to delete
   */
  where?: Prisma.MentorAvailabilityWhereInput
  /**
   * Limit how many MentorAvailabilities to delete.
   */
  limit?: number
}

/**
 * MentorAvailability without action
 */
export type MentorAvailabilityDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MentorAvailability
   */
  select?: Prisma.MentorAvailabilitySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MentorAvailability
   */
  omit?: Prisma.MentorAvailabilityOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MentorAvailabilityInclude<ExtArgs> | null
}
